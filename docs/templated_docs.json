[
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "Carrier:init()",
        "def_gfm": "Carrier:init()",
        "desc": "Spoon initializer method for Carrier.",
        "desc_gfm": "<p>Spoon initializer method for Carrier.</p>\n",
        "doc": "Spoon initializer method for Carrier.\n\nParameters:\n * None\n\nReturns:\n * None",
        "doc_gfm": "<p>Spoon initializer method for Carrier.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "Source/Carrier.spoon/init.lua",
        "lineno": "56",
        "name": "init",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "Carrier:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Carrier:start()",
        "def_gfm": "Carrier:start()",
        "desc": "Spoon start method for Carrier.",
        "desc_gfm": "<p>Spoon start method for Carrier.</p>\n",
        "doc": "Spoon start method for Carrier.\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * Configures the window filter, and subscribes to all window unfocus events.",
        "doc_gfm": "<p>Spoon start method for Carrier.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>Configures the window filter, and subscribes to all window unfocus events.</li>\n</ul>\n",
        "examples": [],
        "file": "Source/Carrier.spoon/init.lua",
        "lineno": "83",
        "name": "start",
        "notes": [
          " * Configures the window filter, and subscribes to all window unfocus events."
        ],
        "notes_gfm": "<ul>\n<li>Configures the window filter, and subscribes to all window unfocus events.</li>\n</ul>\n",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "Carrier:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Carrier:stop()",
        "def_gfm": "Carrier:stop()",
        "desc": "Spoon stop method for Carrier.",
        "desc_gfm": "<p>Spoon stop method for Carrier.</p>\n",
        "doc": "Spoon stop method for Carrier.\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * Unsubscribes the window filter from all subscribed functions.",
        "doc_gfm": "<p>Spoon stop method for Carrier.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>Unsubscribes the window filter from all subscribed functions.</li>\n</ul>\n",
        "examples": [],
        "file": "Source/Carrier.spoon/init.lua",
        "lineno": "116",
        "name": "stop",
        "notes": [
          " * Unsubscribes the window filter from all subscribed functions."
        ],
        "notes_gfm": "<ul>\n<li>Unsubscribes the window filter from all subscribed functions.</li>\n</ul>\n",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "Carrier:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "Carrier.apps",
        "def_gfm": "Carrier.apps",
        "desc": "Table containing each application's name and it's desired configuration. The",
        "desc_gfm": "<p>Table containing each application's name and it's desired configuration. The</p>\n",
        "doc": "Table containing each application's name and it's desired configuration. The\nkey of each entry is the name of the application, and the value is a\nconfiguration table with the following entries:\n * carry - If true, this application will be carried on Space change.",
        "doc_gfm": "<p>Table containing each application's name and it's desired configuration. The\nkey of each entry is the name of the application, and the value is a\nconfiguration table with the following entries:</p>\n<ul>\n<li>carry - If true, this application will be carried on Space change.</li>\n</ul>\n",
        "file": "Source/Carrier.spoon/init.lua",
        "lineno": "27",
        "name": "apps",
        "signature": "Carrier.apps",
        "stripped_doc": "key of each entry is the name of the application, and the value is a\nconfiguration table with the following entries:\n * carry - If true, this application will be carried on Space change.",
        "type": "Variable"
      },
      {
        "def": "Carrier.carryApps",
        "def_gfm": "Carrier.carryApps",
        "desc": "Table containing the name of every app to carry on space change.",
        "desc_gfm": "<p>Table containing the name of every app to carry on space change.</p>\n",
        "doc": "Table containing the name of every app to carry on space change.",
        "doc_gfm": "<p>Table containing the name of every app to carry on space change.</p>\n",
        "file": "Source/Carrier.spoon/init.lua",
        "lineno": "51",
        "name": "carryApps",
        "signature": "Carrier.carryApps",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Carrier.logger",
        "def_gfm": "Carrier.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log",
        "desc_gfm": "<p>Logger object used within the Spoon. Can be accessed to set the default log</p>\n",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log\nlevel for the messages coming from the Spoon.",
        "doc_gfm": "<p>Logger object used within the Spoon. Can be accessed to set the default log\nlevel for the messages coming from the Spoon.</p>\n",
        "file": "Source/Carrier.spoon/init.lua",
        "lineno": "35",
        "name": "logger",
        "signature": "Carrier.logger",
        "stripped_doc": "level for the messages coming from the Spoon.",
        "type": "Variable"
      },
      {
        "def": "Carrier.logLevel",
        "def_gfm": "Carrier.logLevel",
        "desc": "Carrier specific log level override, see hs.logger.setLogLevel for options.",
        "desc_gfm": "<p>Carrier specific log level override, see hs.logger.setLogLevel for options.</p>\n",
        "doc": "Carrier specific log level override, see hs.logger.setLogLevel for options.",
        "doc_gfm": "<p>Carrier specific log level override, see hs.logger.setLogLevel for options.</p>\n",
        "file": "Source/Carrier.spoon/init.lua",
        "lineno": "41",
        "name": "logLevel",
        "signature": "Carrier.logLevel",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Carrier.spaceWatcher",
        "def_gfm": "Carrier.spaceWatcher",
        "desc": "hs.spaces.watcher instance used for monitoring for space changes.",
        "desc_gfm": "<p>hs.spaces.watcher instance used for monitoring for space changes.</p>\n",
        "doc": "hs.spaces.watcher instance used for monitoring for space changes.",
        "doc_gfm": "<p>hs.spaces.watcher instance used for monitoring for space changes.</p>\n",
        "file": "Source/Carrier.spoon/init.lua",
        "lineno": "46",
        "name": "spaceWatcher",
        "signature": "Carrier.spaceWatcher",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Automatically hide apps that are out of focus.",
    "desc_gfm": "<p>Automatically hide apps that are out of focus.</p>\n",
    "doc": "Automatically hide apps that are out of focus.\n\nDownload: https://github.com/adammillerio/Spoons/raw/main/Spoons/Carrier.spoon.zip\n\nThis uses a hs.window.filter to detect windows that have gone out of focus. Then,\nif they are configured to be \"swept\" in the apps config, they will be automatically\nhidden if they remain out of focus after sweepCheckInterval (default 15 seconds).\n\nREADME with example usage: [README.md](https://github.com/adammillerio/Carrier.spoon/blob/main/README.md)",
    "doc_gfm": "<p>Automatically hide apps that are out of focus.</p>\n<p>Download: https://github.com/adammillerio/Spoons/raw/main/Spoons/Carrier.spoon.zip</p>\n<p>This uses a hs.window.filter to detect windows that have gone out of focus. Then,\nif they are configured to be &quot;swept&quot; in the apps config, they will be automatically\nhidden if they remain out of focus after sweepCheckInterval (default 15 seconds).</p>\n<p>README with example usage: <a href=\"https://github.com/adammillerio/Carrier.spoon/blob/main/README.md\">README.md</a></p>\n",
    "items": [
      {
        "def": "Carrier.apps",
        "def_gfm": "Carrier.apps",
        "desc": "Table containing each application's name and it's desired configuration. The",
        "desc_gfm": "<p>Table containing each application's name and it's desired configuration. The</p>\n",
        "doc": "Table containing each application's name and it's desired configuration. The\nkey of each entry is the name of the application, and the value is a\nconfiguration table with the following entries:\n * carry - If true, this application will be carried on Space change.",
        "doc_gfm": "<p>Table containing each application's name and it's desired configuration. The\nkey of each entry is the name of the application, and the value is a\nconfiguration table with the following entries:</p>\n<ul>\n<li>carry - If true, this application will be carried on Space change.</li>\n</ul>\n",
        "file": "Source/Carrier.spoon/init.lua",
        "lineno": "27",
        "name": "apps",
        "signature": "Carrier.apps",
        "stripped_doc": "key of each entry is the name of the application, and the value is a\nconfiguration table with the following entries:\n * carry - If true, this application will be carried on Space change.",
        "type": "Variable"
      },
      {
        "def": "Carrier.carryApps",
        "def_gfm": "Carrier.carryApps",
        "desc": "Table containing the name of every app to carry on space change.",
        "desc_gfm": "<p>Table containing the name of every app to carry on space change.</p>\n",
        "doc": "Table containing the name of every app to carry on space change.",
        "doc_gfm": "<p>Table containing the name of every app to carry on space change.</p>\n",
        "file": "Source/Carrier.spoon/init.lua",
        "lineno": "51",
        "name": "carryApps",
        "signature": "Carrier.carryApps",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Carrier:init()",
        "def_gfm": "Carrier:init()",
        "desc": "Spoon initializer method for Carrier.",
        "desc_gfm": "<p>Spoon initializer method for Carrier.</p>\n",
        "doc": "Spoon initializer method for Carrier.\n\nParameters:\n * None\n\nReturns:\n * None",
        "doc_gfm": "<p>Spoon initializer method for Carrier.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "Source/Carrier.spoon/init.lua",
        "lineno": "56",
        "name": "init",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "Carrier:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Carrier.logger",
        "def_gfm": "Carrier.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log",
        "desc_gfm": "<p>Logger object used within the Spoon. Can be accessed to set the default log</p>\n",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log\nlevel for the messages coming from the Spoon.",
        "doc_gfm": "<p>Logger object used within the Spoon. Can be accessed to set the default log\nlevel for the messages coming from the Spoon.</p>\n",
        "file": "Source/Carrier.spoon/init.lua",
        "lineno": "35",
        "name": "logger",
        "signature": "Carrier.logger",
        "stripped_doc": "level for the messages coming from the Spoon.",
        "type": "Variable"
      },
      {
        "def": "Carrier.logLevel",
        "def_gfm": "Carrier.logLevel",
        "desc": "Carrier specific log level override, see hs.logger.setLogLevel for options.",
        "desc_gfm": "<p>Carrier specific log level override, see hs.logger.setLogLevel for options.</p>\n",
        "doc": "Carrier specific log level override, see hs.logger.setLogLevel for options.",
        "doc_gfm": "<p>Carrier specific log level override, see hs.logger.setLogLevel for options.</p>\n",
        "file": "Source/Carrier.spoon/init.lua",
        "lineno": "41",
        "name": "logLevel",
        "signature": "Carrier.logLevel",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Carrier.spaceWatcher",
        "def_gfm": "Carrier.spaceWatcher",
        "desc": "hs.spaces.watcher instance used for monitoring for space changes.",
        "desc_gfm": "<p>hs.spaces.watcher instance used for monitoring for space changes.</p>\n",
        "doc": "hs.spaces.watcher instance used for monitoring for space changes.",
        "doc_gfm": "<p>hs.spaces.watcher instance used for monitoring for space changes.</p>\n",
        "file": "Source/Carrier.spoon/init.lua",
        "lineno": "46",
        "name": "spaceWatcher",
        "signature": "Carrier.spaceWatcher",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Carrier:start()",
        "def_gfm": "Carrier:start()",
        "desc": "Spoon start method for Carrier.",
        "desc_gfm": "<p>Spoon start method for Carrier.</p>\n",
        "doc": "Spoon start method for Carrier.\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * Configures the window filter, and subscribes to all window unfocus events.",
        "doc_gfm": "<p>Spoon start method for Carrier.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>Configures the window filter, and subscribes to all window unfocus events.</li>\n</ul>\n",
        "examples": [],
        "file": "Source/Carrier.spoon/init.lua",
        "lineno": "83",
        "name": "start",
        "notes": [
          " * Configures the window filter, and subscribes to all window unfocus events."
        ],
        "notes_gfm": "<ul>\n<li>Configures the window filter, and subscribes to all window unfocus events.</li>\n</ul>\n",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "Carrier:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Carrier:stop()",
        "def_gfm": "Carrier:stop()",
        "desc": "Spoon stop method for Carrier.",
        "desc_gfm": "<p>Spoon stop method for Carrier.</p>\n",
        "doc": "Spoon stop method for Carrier.\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * Unsubscribes the window filter from all subscribed functions.",
        "doc_gfm": "<p>Spoon stop method for Carrier.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>Unsubscribes the window filter from all subscribed functions.</li>\n</ul>\n",
        "examples": [],
        "file": "Source/Carrier.spoon/init.lua",
        "lineno": "116",
        "name": "stop",
        "notes": [
          " * Unsubscribes the window filter from all subscribed functions."
        ],
        "notes_gfm": "<ul>\n<li>Unsubscribes the window filter from all subscribed functions.</li>\n</ul>\n",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "Carrier:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "Carrier",
    "stripped_doc": "\nDownload: https://github.com/adammillerio/Spoons/raw/main/Spoons/Carrier.spoon.zip\n\nThis uses a hs.window.filter to detect windows that have gone out of focus. Then,\nif they are configured to be \"swept\" in the apps config, they will be automatically\nhidden if they remain out of focus after sweepCheckInterval (default 15 seconds).\n\nREADME with example usage: [README.md](https://github.com/adammillerio/Carrier.spoon/blob/main/README.md)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [
      {
        "def": "EnsureApp.action.maximize",
        "def_gfm": "EnsureApp.action.maximize",
        "desc": "Maximize the application on the current space if it is not maximized already.",
        "desc_gfm": "<p>Maximize the application on the current space if it is not maximized already.</p>\n",
        "doc": "Maximize the application on the current space if it is not maximized already.",
        "doc_gfm": "<p>Maximize the application on the current space if it is not maximized already.</p>\n",
        "file": "Source/EnsureApp.spoon/init.lua",
        "lineno": "29",
        "name": "maximize",
        "signature": "EnsureApp.action.maximize",
        "stripped_doc": "",
        "type": "Constant"
      },
      {
        "def": "EnsureApp.action.move",
        "def_gfm": "EnsureApp.action.move",
        "desc": "Move the window to appear under the provided frame as if it were a menu. This",
        "desc_gfm": "<p>Move the window to appear under the provided frame as if it were a menu. This</p>\n",
        "doc": "Move the window to appear under the provided frame as if it were a menu. This\nrequires the actionConfig `moveMenuBar` to be set to the destination hs.menubar\nduring calls to ensureApp().",
        "doc_gfm": "<p>Move the window to appear under the provided frame as if it were a menu. This\nrequires the actionConfig <code>moveMenuBar</code> to be set to the destination hs.menubar\nduring calls to ensureApp().</p>\n",
        "file": "Source/EnsureApp.spoon/init.lua",
        "lineno": "23",
        "name": "move",
        "signature": "EnsureApp.action.move",
        "stripped_doc": "requires the actionConfig `moveMenuBar` to be set to the destination hs.menubar\nduring calls to ensureApp().",
        "type": "Constant"
      }
    ],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "EnsureApp:ensureApp(appName[, actionConfig])",
        "def_gfm": "EnsureApp:ensureApp(appName[, actionConfig])",
        "desc": "Ensure the existence of a window from appName in the current Space.",
        "desc_gfm": "<p>Ensure the existence of a window from appName in the current Space.</p>\n",
        "doc": "Ensure the existence of a window from appName in the current Space.\n\nParameters:\n * appName - Name of the application to ensure.\n * actionConfig - Optional actionConfig table with action-specific information.\n   * moveMenuBar- hs.menubar to move under with `action=move`.\n\nReturns:\n * None\n\nNotes:\n * Refer to EnsureApp.apps for information on how to configure apps.",
        "doc_gfm": "<p>Ensure the existence of a window from appName in the current Space.</p>\n<p>Parameters:</p>\n<ul>\n<li>appName - Name of the application to ensure.</li>\n<li>actionConfig - Optional actionConfig table with action-specific information.<ul>\n<li>moveMenuBar- hs.menubar to move under with <code>action=move</code>.</li>\n</ul>\n</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>Refer to EnsureApp.apps for information on how to configure apps.</li>\n</ul>\n",
        "examples": [],
        "file": "Source/EnsureApp.spoon/init.lua",
        "lineno": "253",
        "name": "ensureApp",
        "notes": [
          " * Refer to EnsureApp.apps for information on how to configure apps."
        ],
        "notes_gfm": "<ul>\n<li>Refer to EnsureApp.apps for information on how to configure apps.</li>\n</ul>\n",
        "parameters": [
          " * appName - Name of the application to ensure.",
          " * actionConfig - Optional actionConfig table with action-specific information.\n   * moveMenuBar- hs.menubar to move under with `action=move`."
        ],
        "parameters_gfm": "<ul>\n<li>appName - Name of the application to ensure.</li>\n<li>actionConfig - Optional actionConfig table with action-specific information.<ul>\n<li>moveMenuBar- hs.menubar to move under with <code>action=move</code>.</li>\n</ul>\n</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "EnsureApp:ensureApp(appName[, actionConfig])",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EnsureApp:ensureAppCallback(appName[, actionConfig])",
        "def_gfm": "EnsureApp:ensureAppCallback(appName[, actionConfig])",
        "desc": "(Callback) Ensure the existence of a window from appName in the current Space.",
        "desc_gfm": "<p>(Callback) Ensure the existence of a window from appName in the current Space.</p>\n",
        "doc": "(Callback) Ensure the existence of a window from appName in the current Space.\n\nParameters:\n * appName - Name of the application to ensure.\n * actionConfig - Optional actionConfig table with action-specific information.\n   * moveMenuBar- hs.menubar to move under with `action=move`.\n\nReturns:\n * None\n\nNotes:\n * This is a utility class for mapping app ensures to things like menu bars.\n * Refer to EnsureApp.apps for information on how to configure apps.",
        "doc_gfm": "<p>(Callback) Ensure the existence of a window from appName in the current Space.</p>\n<p>Parameters:</p>\n<ul>\n<li>appName - Name of the application to ensure.</li>\n<li>actionConfig - Optional actionConfig table with action-specific information.<ul>\n<li>moveMenuBar- hs.menubar to move under with <code>action=move</code>.</li>\n</ul>\n</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>This is a utility class for mapping app ensures to things like menu bars.</li>\n<li>Refer to EnsureApp.apps for information on how to configure apps.</li>\n</ul>\n",
        "examples": [],
        "file": "Source/EnsureApp.spoon/init.lua",
        "lineno": "234",
        "name": "ensureAppCallback",
        "notes": [
          " * This is a utility class for mapping app ensures to things like menu bars.",
          " * Refer to EnsureApp.apps for information on how to configure apps."
        ],
        "notes_gfm": "<ul>\n<li>This is a utility class for mapping app ensures to things like menu bars.</li>\n<li>Refer to EnsureApp.apps for information on how to configure apps.</li>\n</ul>\n",
        "parameters": [
          " * appName - Name of the application to ensure.",
          " * actionConfig - Optional actionConfig table with action-specific information.\n   * moveMenuBar- hs.menubar to move under with `action=move`."
        ],
        "parameters_gfm": "<ul>\n<li>appName - Name of the application to ensure.</li>\n<li>actionConfig - Optional actionConfig table with action-specific information.<ul>\n<li>moveMenuBar- hs.menubar to move under with <code>action=move</code>.</li>\n</ul>\n</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "EnsureApp:ensureAppCallback(appName[, actionConfig])",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EnsureApp:init()",
        "def_gfm": "EnsureApp:init()",
        "desc": "Spoon initializer method for EnsureApp.",
        "desc_gfm": "<p>Spoon initializer method for EnsureApp.</p>\n",
        "doc": "Spoon initializer method for EnsureApp.\n\nParameters:\n * None\n\nReturns:\n * None",
        "doc_gfm": "<p>Spoon initializer method for EnsureApp.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "Source/EnsureApp.spoon/init.lua",
        "lineno": "68",
        "name": "init",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "EnsureApp:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EnsureApp:start()",
        "def_gfm": "EnsureApp:start()",
        "desc": "Spoon start method for EnsureApp.",
        "desc_gfm": "<p>Spoon start method for EnsureApp.</p>\n",
        "doc": "Spoon start method for EnsureApp.\n\nParameters:\n * None\n\nReturns:\n * None",
        "doc_gfm": "<p>Spoon start method for EnsureApp.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "Source/EnsureApp.spoon/init.lua",
        "lineno": "358",
        "name": "start",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "EnsureApp:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EnsureApp:stop()",
        "def_gfm": "EnsureApp:stop()",
        "desc": "Spoon stop method for EnsureApp.",
        "desc_gfm": "<p>Spoon stop method for EnsureApp.</p>\n",
        "doc": "Spoon stop method for EnsureApp.\n\nParameters:\n * None\n\nReturns:\n * None",
        "doc_gfm": "<p>Spoon stop method for EnsureApp.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "Source/EnsureApp.spoon/init.lua",
        "lineno": "376",
        "name": "stop",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "EnsureApp:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "EnsureApp.apps",
        "def_gfm": "EnsureApp.apps",
        "desc": "Table containing each application's name and it's desired configuration. The",
        "desc_gfm": "<p>Table containing each application's name and it's desired configuration. The</p>\n",
        "doc": "Table containing each application's name and it's desired configuration. The\nkey of each entry is just an identifier used during calls to ensureApp, and\nthe value is a configuration table with the following entries:\n * app - Application name as it appears in the title bar.\n * action - String with action to take on window when showing. See constants.\n * spacePrecedence - Open a Space-specific window of this app, requires newWindowConfig.\n * newWindowConfig - Configuration for opening a new window of the app with values.\n   * menuSection - Menu section in app menu bar to select.\n   * menuItem - Menu item in menu section to select\n * disableOpen - If true, this will disable auto-opening the app if not open.",
        "doc_gfm": "<p>Table containing each application's name and it's desired configuration. The\nkey of each entry is just an identifier used during calls to ensureApp, and\nthe value is a configuration table with the following entries:</p>\n<ul>\n<li>app - Application name as it appears in the title bar.</li>\n<li>action - String with action to take on window when showing. See constants.</li>\n<li>spacePrecedence - Open a Space-specific window of this app, requires newWindowConfig.</li>\n<li>newWindowConfig - Configuration for opening a new window of the app with values.<ul>\n<li>menuSection - Menu section in app menu bar to select.</li>\n<li>menuItem - Menu item in menu section to select</li>\n</ul>\n</li>\n<li>disableOpen - If true, this will disable auto-opening the app if not open.</li>\n</ul>\n",
        "file": "Source/EnsureApp.spoon/init.lua",
        "lineno": "37",
        "name": "apps",
        "signature": "EnsureApp.apps",
        "stripped_doc": "key of each entry is just an identifier used during calls to ensureApp, and\nthe value is a configuration table with the following entries:\n * app - Application name as it appears in the title bar.\n * action - String with action to take on window when showing. See constants.\n * spacePrecedence - Open a Space-specific window of this app, requires newWindowConfig.\n * newWindowConfig - Configuration for opening a new window of the app with values.\n   * menuSection - Menu section in app menu bar to select.\n   * menuItem - Menu item in menu section to select\n * disableOpen - If true, this will disable auto-opening the app if not open.",
        "type": "Variable"
      },
      {
        "def": "EnsureApp.logger",
        "def_gfm": "EnsureApp.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log ",
        "desc_gfm": "<p>Logger object used within the Spoon. Can be accessed to set the default log</p>\n",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log \nlevel for the messages coming from the Spoon.",
        "doc_gfm": "<p>Logger object used within the Spoon. Can be accessed to set the default log \nlevel for the messages coming from the Spoon.</p>\n",
        "file": "Source/EnsureApp.spoon/init.lua",
        "lineno": "51",
        "name": "logger",
        "signature": "EnsureApp.logger",
        "stripped_doc": "level for the messages coming from the Spoon.",
        "type": "Variable"
      },
      {
        "def": "EnsureApp.logLevel",
        "def_gfm": "EnsureApp.logLevel",
        "desc": "EnsureApp specific log level override, see hs.logger.setLogLevel for options.",
        "desc_gfm": "<p>EnsureApp specific log level override, see hs.logger.setLogLevel for options.</p>\n",
        "doc": "EnsureApp specific log level override, see hs.logger.setLogLevel for options.",
        "doc_gfm": "<p>EnsureApp specific log level override, see hs.logger.setLogLevel for options.</p>\n",
        "file": "Source/EnsureApp.spoon/init.lua",
        "lineno": "57",
        "name": "logLevel",
        "signature": "EnsureApp.logLevel",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "EnsureApp.windowOpenTimer",
        "def_gfm": "EnsureApp.windowOpenTimer",
        "desc": "hs.timer for moving an app's first window after being opened via EnsureApp.",
        "desc_gfm": "<p>hs.timer for moving an app's first window after being opened via EnsureApp.</p>\n",
        "doc": "hs.timer for moving an app's first window after being opened via EnsureApp.\nThis behavior can be disabled by setting disableOpen=true on the app config.",
        "doc_gfm": "<p>hs.timer for moving an app's first window after being opened via EnsureApp.\nThis behavior can be disabled by setting disableOpen=true on the app config.</p>\n",
        "file": "Source/EnsureApp.spoon/init.lua",
        "lineno": "62",
        "name": "windowOpenTimer",
        "signature": "EnsureApp.windowOpenTimer",
        "stripped_doc": "This behavior can be disabled by setting disableOpen=true on the app config.",
        "type": "Variable"
      }
    ],
    "desc": "Utility for providing fast and guaranteed access to app windows during macros.",
    "desc_gfm": "<p>Utility for providing fast and guaranteed access to app windows during macros.</p>\n",
    "doc": "Utility for providing fast and guaranteed access to app windows during macros.\n\nDownload: https://github.com/adammillerio/Spoons/raw/main/Spoons/EnsureApp.spoon.zip\n\nREADME with Example Usage: [README.md](https://github.com/adammillerio/EnsureApp.spoon/blob/main/README.md)",
    "doc_gfm": "<p>Utility for providing fast and guaranteed access to app windows during macros.</p>\n<p>Download: https://github.com/adammillerio/Spoons/raw/main/Spoons/EnsureApp.spoon.zip</p>\n<p>README with Example Usage: <a href=\"https://github.com/adammillerio/EnsureApp.spoon/blob/main/README.md\">README.md</a></p>\n",
    "items": [
      {
        "def": "EnsureApp.apps",
        "def_gfm": "EnsureApp.apps",
        "desc": "Table containing each application's name and it's desired configuration. The",
        "desc_gfm": "<p>Table containing each application's name and it's desired configuration. The</p>\n",
        "doc": "Table containing each application's name and it's desired configuration. The\nkey of each entry is just an identifier used during calls to ensureApp, and\nthe value is a configuration table with the following entries:\n * app - Application name as it appears in the title bar.\n * action - String with action to take on window when showing. See constants.\n * spacePrecedence - Open a Space-specific window of this app, requires newWindowConfig.\n * newWindowConfig - Configuration for opening a new window of the app with values.\n   * menuSection - Menu section in app menu bar to select.\n   * menuItem - Menu item in menu section to select\n * disableOpen - If true, this will disable auto-opening the app if not open.",
        "doc_gfm": "<p>Table containing each application's name and it's desired configuration. The\nkey of each entry is just an identifier used during calls to ensureApp, and\nthe value is a configuration table with the following entries:</p>\n<ul>\n<li>app - Application name as it appears in the title bar.</li>\n<li>action - String with action to take on window when showing. See constants.</li>\n<li>spacePrecedence - Open a Space-specific window of this app, requires newWindowConfig.</li>\n<li>newWindowConfig - Configuration for opening a new window of the app with values.<ul>\n<li>menuSection - Menu section in app menu bar to select.</li>\n<li>menuItem - Menu item in menu section to select</li>\n</ul>\n</li>\n<li>disableOpen - If true, this will disable auto-opening the app if not open.</li>\n</ul>\n",
        "file": "Source/EnsureApp.spoon/init.lua",
        "lineno": "37",
        "name": "apps",
        "signature": "EnsureApp.apps",
        "stripped_doc": "key of each entry is just an identifier used during calls to ensureApp, and\nthe value is a configuration table with the following entries:\n * app - Application name as it appears in the title bar.\n * action - String with action to take on window when showing. See constants.\n * spacePrecedence - Open a Space-specific window of this app, requires newWindowConfig.\n * newWindowConfig - Configuration for opening a new window of the app with values.\n   * menuSection - Menu section in app menu bar to select.\n   * menuItem - Menu item in menu section to select\n * disableOpen - If true, this will disable auto-opening the app if not open.",
        "type": "Variable"
      },
      {
        "def": "EnsureApp:ensureApp(appName[, actionConfig])",
        "def_gfm": "EnsureApp:ensureApp(appName[, actionConfig])",
        "desc": "Ensure the existence of a window from appName in the current Space.",
        "desc_gfm": "<p>Ensure the existence of a window from appName in the current Space.</p>\n",
        "doc": "Ensure the existence of a window from appName in the current Space.\n\nParameters:\n * appName - Name of the application to ensure.\n * actionConfig - Optional actionConfig table with action-specific information.\n   * moveMenuBar- hs.menubar to move under with `action=move`.\n\nReturns:\n * None\n\nNotes:\n * Refer to EnsureApp.apps for information on how to configure apps.",
        "doc_gfm": "<p>Ensure the existence of a window from appName in the current Space.</p>\n<p>Parameters:</p>\n<ul>\n<li>appName - Name of the application to ensure.</li>\n<li>actionConfig - Optional actionConfig table with action-specific information.<ul>\n<li>moveMenuBar- hs.menubar to move under with <code>action=move</code>.</li>\n</ul>\n</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>Refer to EnsureApp.apps for information on how to configure apps.</li>\n</ul>\n",
        "examples": [],
        "file": "Source/EnsureApp.spoon/init.lua",
        "lineno": "253",
        "name": "ensureApp",
        "notes": [
          " * Refer to EnsureApp.apps for information on how to configure apps."
        ],
        "notes_gfm": "<ul>\n<li>Refer to EnsureApp.apps for information on how to configure apps.</li>\n</ul>\n",
        "parameters": [
          " * appName - Name of the application to ensure.",
          " * actionConfig - Optional actionConfig table with action-specific information.\n   * moveMenuBar- hs.menubar to move under with `action=move`."
        ],
        "parameters_gfm": "<ul>\n<li>appName - Name of the application to ensure.</li>\n<li>actionConfig - Optional actionConfig table with action-specific information.<ul>\n<li>moveMenuBar- hs.menubar to move under with <code>action=move</code>.</li>\n</ul>\n</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "EnsureApp:ensureApp(appName[, actionConfig])",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EnsureApp:ensureAppCallback(appName[, actionConfig])",
        "def_gfm": "EnsureApp:ensureAppCallback(appName[, actionConfig])",
        "desc": "(Callback) Ensure the existence of a window from appName in the current Space.",
        "desc_gfm": "<p>(Callback) Ensure the existence of a window from appName in the current Space.</p>\n",
        "doc": "(Callback) Ensure the existence of a window from appName in the current Space.\n\nParameters:\n * appName - Name of the application to ensure.\n * actionConfig - Optional actionConfig table with action-specific information.\n   * moveMenuBar- hs.menubar to move under with `action=move`.\n\nReturns:\n * None\n\nNotes:\n * This is a utility class for mapping app ensures to things like menu bars.\n * Refer to EnsureApp.apps for information on how to configure apps.",
        "doc_gfm": "<p>(Callback) Ensure the existence of a window from appName in the current Space.</p>\n<p>Parameters:</p>\n<ul>\n<li>appName - Name of the application to ensure.</li>\n<li>actionConfig - Optional actionConfig table with action-specific information.<ul>\n<li>moveMenuBar- hs.menubar to move under with <code>action=move</code>.</li>\n</ul>\n</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>This is a utility class for mapping app ensures to things like menu bars.</li>\n<li>Refer to EnsureApp.apps for information on how to configure apps.</li>\n</ul>\n",
        "examples": [],
        "file": "Source/EnsureApp.spoon/init.lua",
        "lineno": "234",
        "name": "ensureAppCallback",
        "notes": [
          " * This is a utility class for mapping app ensures to things like menu bars.",
          " * Refer to EnsureApp.apps for information on how to configure apps."
        ],
        "notes_gfm": "<ul>\n<li>This is a utility class for mapping app ensures to things like menu bars.</li>\n<li>Refer to EnsureApp.apps for information on how to configure apps.</li>\n</ul>\n",
        "parameters": [
          " * appName - Name of the application to ensure.",
          " * actionConfig - Optional actionConfig table with action-specific information.\n   * moveMenuBar- hs.menubar to move under with `action=move`."
        ],
        "parameters_gfm": "<ul>\n<li>appName - Name of the application to ensure.</li>\n<li>actionConfig - Optional actionConfig table with action-specific information.<ul>\n<li>moveMenuBar- hs.menubar to move under with <code>action=move</code>.</li>\n</ul>\n</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "EnsureApp:ensureAppCallback(appName[, actionConfig])",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EnsureApp:init()",
        "def_gfm": "EnsureApp:init()",
        "desc": "Spoon initializer method for EnsureApp.",
        "desc_gfm": "<p>Spoon initializer method for EnsureApp.</p>\n",
        "doc": "Spoon initializer method for EnsureApp.\n\nParameters:\n * None\n\nReturns:\n * None",
        "doc_gfm": "<p>Spoon initializer method for EnsureApp.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "Source/EnsureApp.spoon/init.lua",
        "lineno": "68",
        "name": "init",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "EnsureApp:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EnsureApp.logger",
        "def_gfm": "EnsureApp.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log ",
        "desc_gfm": "<p>Logger object used within the Spoon. Can be accessed to set the default log</p>\n",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log \nlevel for the messages coming from the Spoon.",
        "doc_gfm": "<p>Logger object used within the Spoon. Can be accessed to set the default log \nlevel for the messages coming from the Spoon.</p>\n",
        "file": "Source/EnsureApp.spoon/init.lua",
        "lineno": "51",
        "name": "logger",
        "signature": "EnsureApp.logger",
        "stripped_doc": "level for the messages coming from the Spoon.",
        "type": "Variable"
      },
      {
        "def": "EnsureApp.logLevel",
        "def_gfm": "EnsureApp.logLevel",
        "desc": "EnsureApp specific log level override, see hs.logger.setLogLevel for options.",
        "desc_gfm": "<p>EnsureApp specific log level override, see hs.logger.setLogLevel for options.</p>\n",
        "doc": "EnsureApp specific log level override, see hs.logger.setLogLevel for options.",
        "doc_gfm": "<p>EnsureApp specific log level override, see hs.logger.setLogLevel for options.</p>\n",
        "file": "Source/EnsureApp.spoon/init.lua",
        "lineno": "57",
        "name": "logLevel",
        "signature": "EnsureApp.logLevel",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "EnsureApp.action.maximize",
        "def_gfm": "EnsureApp.action.maximize",
        "desc": "Maximize the application on the current space if it is not maximized already.",
        "desc_gfm": "<p>Maximize the application on the current space if it is not maximized already.</p>\n",
        "doc": "Maximize the application on the current space if it is not maximized already.",
        "doc_gfm": "<p>Maximize the application on the current space if it is not maximized already.</p>\n",
        "file": "Source/EnsureApp.spoon/init.lua",
        "lineno": "29",
        "name": "maximize",
        "signature": "EnsureApp.action.maximize",
        "stripped_doc": "",
        "type": "Constant"
      },
      {
        "def": "EnsureApp.action.move",
        "def_gfm": "EnsureApp.action.move",
        "desc": "Move the window to appear under the provided frame as if it were a menu. This",
        "desc_gfm": "<p>Move the window to appear under the provided frame as if it were a menu. This</p>\n",
        "doc": "Move the window to appear under the provided frame as if it were a menu. This\nrequires the actionConfig `moveMenuBar` to be set to the destination hs.menubar\nduring calls to ensureApp().",
        "doc_gfm": "<p>Move the window to appear under the provided frame as if it were a menu. This\nrequires the actionConfig <code>moveMenuBar</code> to be set to the destination hs.menubar\nduring calls to ensureApp().</p>\n",
        "file": "Source/EnsureApp.spoon/init.lua",
        "lineno": "23",
        "name": "move",
        "signature": "EnsureApp.action.move",
        "stripped_doc": "requires the actionConfig `moveMenuBar` to be set to the destination hs.menubar\nduring calls to ensureApp().",
        "type": "Constant"
      },
      {
        "def": "EnsureApp:start()",
        "def_gfm": "EnsureApp:start()",
        "desc": "Spoon start method for EnsureApp.",
        "desc_gfm": "<p>Spoon start method for EnsureApp.</p>\n",
        "doc": "Spoon start method for EnsureApp.\n\nParameters:\n * None\n\nReturns:\n * None",
        "doc_gfm": "<p>Spoon start method for EnsureApp.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "Source/EnsureApp.spoon/init.lua",
        "lineno": "358",
        "name": "start",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "EnsureApp:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EnsureApp:stop()",
        "def_gfm": "EnsureApp:stop()",
        "desc": "Spoon stop method for EnsureApp.",
        "desc_gfm": "<p>Spoon stop method for EnsureApp.</p>\n",
        "doc": "Spoon stop method for EnsureApp.\n\nParameters:\n * None\n\nReturns:\n * None",
        "doc_gfm": "<p>Spoon stop method for EnsureApp.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "Source/EnsureApp.spoon/init.lua",
        "lineno": "376",
        "name": "stop",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "EnsureApp:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "EnsureApp.windowOpenTimer",
        "def_gfm": "EnsureApp.windowOpenTimer",
        "desc": "hs.timer for moving an app's first window after being opened via EnsureApp.",
        "desc_gfm": "<p>hs.timer for moving an app's first window after being opened via EnsureApp.</p>\n",
        "doc": "hs.timer for moving an app's first window after being opened via EnsureApp.\nThis behavior can be disabled by setting disableOpen=true on the app config.",
        "doc_gfm": "<p>hs.timer for moving an app's first window after being opened via EnsureApp.\nThis behavior can be disabled by setting disableOpen=true on the app config.</p>\n",
        "file": "Source/EnsureApp.spoon/init.lua",
        "lineno": "62",
        "name": "windowOpenTimer",
        "signature": "EnsureApp.windowOpenTimer",
        "stripped_doc": "This behavior can be disabled by setting disableOpen=true on the app config.",
        "type": "Variable"
      }
    ],
    "name": "EnsureApp",
    "stripped_doc": "\nDownload: https://github.com/adammillerio/Spoons/raw/main/Spoons/EnsureApp.spoon.zip\n\nREADME with Example Usage: [README.md](https://github.com/adammillerio/EnsureApp.spoon/blob/main/README.md)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "HotkeyApps:bindHotkeys(mapping)",
        "def_gfm": "HotkeyApps:bindHotkeys(mapping)",
        "desc": "Bind method, binds all provided hotkeys to their app ensure callbacks.",
        "desc_gfm": "<p>Bind method, binds all provided hotkeys to their app ensure callbacks.</p>\n",
        "doc": "Bind method, binds all provided hotkeys to their app ensure callbacks.\n\nParameters:\n * mapping - Table of app -> hotkey mappings where app is the name of the\n   app in the EnsureApps config.\nReturns:\n * None",
        "doc_gfm": "<p>Bind method, binds all provided hotkeys to their app ensure callbacks.</p>\n<p>Parameters:</p>\n<ul>\n<li>mapping - Table of app -&gt; hotkey mappings where app is the name of the\napp in the EnsureApps config.</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "Source/HotkeyApps.spoon/init.lua",
        "lineno": "45",
        "name": "bindHotkeys",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * mapping - Table of app -> hotkey mappings where app is the name of the app in the EnsureApps config."
        ],
        "parameters_gfm": "<ul>\n<li>mapping - Table of app -&gt; hotkey mappings where app is the name of the app in the EnsureApps config.</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "HotkeyApps:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HotkeyApps:init()",
        "def_gfm": "HotkeyApps:init()",
        "desc": "Spoon initializer method for EnsureApp.",
        "desc_gfm": "<p>Spoon initializer method for EnsureApp.</p>\n",
        "doc": "Spoon initializer method for EnsureApp.\n\nParameters:\n * None\n\nReturns:\n * None",
        "doc_gfm": "<p>Spoon initializer method for EnsureApp.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "Source/HotkeyApps.spoon/init.lua",
        "lineno": "34",
        "name": "init",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "HotkeyApps:init()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "HotkeyApps.logger",
        "def_gfm": "HotkeyApps.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log ",
        "desc_gfm": "<p>Logger object used within the Spoon. Can be accessed to set the default log</p>\n",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log \nlevel for the messages coming from the Spoon.",
        "doc_gfm": "<p>Logger object used within the Spoon. Can be accessed to set the default log \nlevel for the messages coming from the Spoon.</p>\n",
        "file": "Source/HotkeyApps.spoon/init.lua",
        "lineno": "23",
        "name": "logger",
        "signature": "HotkeyApps.logger",
        "stripped_doc": "level for the messages coming from the Spoon.",
        "type": "Variable"
      },
      {
        "def": "HotkeyApps.logLevel",
        "def_gfm": "HotkeyApps.logLevel",
        "desc": "HotkeyApps specific log level override, see hs.logger.setLogLevel for options.",
        "desc_gfm": "<p>HotkeyApps specific log level override, see hs.logger.setLogLevel for options.</p>\n",
        "doc": "HotkeyApps specific log level override, see hs.logger.setLogLevel for options.",
        "doc_gfm": "<p>HotkeyApps specific log level override, see hs.logger.setLogLevel for options.</p>\n",
        "file": "Source/HotkeyApps.spoon/init.lua",
        "lineno": "29",
        "name": "logLevel",
        "signature": "HotkeyApps.logLevel",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Quickly ensure access to apps in the current Space via hotkeys.",
    "desc_gfm": "<p>Quickly ensure access to apps in the current Space via hotkeys.</p>\n",
    "doc": "Quickly ensure access to apps in the current Space via hotkeys.\n\nDownload: https://github.com/adammillerio/Spoons/raw/main/Spoons/HotkeyApps.spoon.zip\n\nREADME with Example Usage: [README.md](https://github.com/adammillerio/HotkeyApps.spoon/blob/main/README.md)",
    "doc_gfm": "<p>Quickly ensure access to apps in the current Space via hotkeys.</p>\n<p>Download: https://github.com/adammillerio/Spoons/raw/main/Spoons/HotkeyApps.spoon.zip</p>\n<p>README with Example Usage: <a href=\"https://github.com/adammillerio/HotkeyApps.spoon/blob/main/README.md\">README.md</a></p>\n",
    "items": [
      {
        "def": "HotkeyApps:bindHotkeys(mapping)",
        "def_gfm": "HotkeyApps:bindHotkeys(mapping)",
        "desc": "Bind method, binds all provided hotkeys to their app ensure callbacks.",
        "desc_gfm": "<p>Bind method, binds all provided hotkeys to their app ensure callbacks.</p>\n",
        "doc": "Bind method, binds all provided hotkeys to their app ensure callbacks.\n\nParameters:\n * mapping - Table of app -> hotkey mappings where app is the name of the\n   app in the EnsureApps config.\nReturns:\n * None",
        "doc_gfm": "<p>Bind method, binds all provided hotkeys to their app ensure callbacks.</p>\n<p>Parameters:</p>\n<ul>\n<li>mapping - Table of app -&gt; hotkey mappings where app is the name of the\napp in the EnsureApps config.</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "Source/HotkeyApps.spoon/init.lua",
        "lineno": "45",
        "name": "bindHotkeys",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * mapping - Table of app -> hotkey mappings where app is the name of the app in the EnsureApps config."
        ],
        "parameters_gfm": "<ul>\n<li>mapping - Table of app -&gt; hotkey mappings where app is the name of the app in the EnsureApps config.</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "HotkeyApps:bindHotkeys(mapping)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HotkeyApps:init()",
        "def_gfm": "HotkeyApps:init()",
        "desc": "Spoon initializer method for EnsureApp.",
        "desc_gfm": "<p>Spoon initializer method for EnsureApp.</p>\n",
        "doc": "Spoon initializer method for EnsureApp.\n\nParameters:\n * None\n\nReturns:\n * None",
        "doc_gfm": "<p>Spoon initializer method for EnsureApp.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "Source/HotkeyApps.spoon/init.lua",
        "lineno": "34",
        "name": "init",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "HotkeyApps:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "HotkeyApps.logger",
        "def_gfm": "HotkeyApps.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log ",
        "desc_gfm": "<p>Logger object used within the Spoon. Can be accessed to set the default log</p>\n",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log \nlevel for the messages coming from the Spoon.",
        "doc_gfm": "<p>Logger object used within the Spoon. Can be accessed to set the default log \nlevel for the messages coming from the Spoon.</p>\n",
        "file": "Source/HotkeyApps.spoon/init.lua",
        "lineno": "23",
        "name": "logger",
        "signature": "HotkeyApps.logger",
        "stripped_doc": "level for the messages coming from the Spoon.",
        "type": "Variable"
      },
      {
        "def": "HotkeyApps.logLevel",
        "def_gfm": "HotkeyApps.logLevel",
        "desc": "HotkeyApps specific log level override, see hs.logger.setLogLevel for options.",
        "desc_gfm": "<p>HotkeyApps specific log level override, see hs.logger.setLogLevel for options.</p>\n",
        "doc": "HotkeyApps specific log level override, see hs.logger.setLogLevel for options.",
        "doc_gfm": "<p>HotkeyApps specific log level override, see hs.logger.setLogLevel for options.</p>\n",
        "file": "Source/HotkeyApps.spoon/init.lua",
        "lineno": "29",
        "name": "logLevel",
        "signature": "HotkeyApps.logLevel",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "name": "HotkeyApps",
    "stripped_doc": "\nDownload: https://github.com/adammillerio/Spoons/raw/main/Spoons/HotkeyApps.spoon.zip\n\nREADME with Example Usage: [README.md](https://github.com/adammillerio/HotkeyApps.spoon/blob/main/README.md)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "MenuBarApps:init()",
        "def_gfm": "MenuBarApps:init()",
        "desc": "Spoon initializer method for MenuBarApps.",
        "desc_gfm": "<p>Spoon initializer method for MenuBarApps.</p>\n",
        "doc": "Spoon initializer method for MenuBarApps.\n\nParameters:\n * None\n\nReturns:\n * None",
        "doc_gfm": "<p>Spoon initializer method for MenuBarApps.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "Source/MenuBarApps.spoon/init.lua",
        "lineno": "48",
        "name": "init",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "MenuBarApps:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenuBarApps:start()",
        "def_gfm": "MenuBarApps:start()",
        "desc": "Spoon start method for MenuBarApps. Creates all configured menu bars.",
        "desc_gfm": "<p>Spoon start method for MenuBarApps. Creates all configured menu bars.</p>\n",
        "doc": "Spoon start method for MenuBarApps. Creates all configured menu bars.\n\nParameters:\n * None\n\nReturns:\n * None",
        "doc_gfm": "<p>Spoon start method for MenuBarApps. Creates all configured menu bars.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "Source/MenuBarApps.spoon/init.lua",
        "lineno": "160",
        "name": "start",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "MenuBarApps:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenuBarApps:stop()",
        "def_gfm": "MenuBarApps:stop()",
        "desc": "Spoon stop method for MenuBarApps. Deletes all configured menu bars.",
        "desc_gfm": "<p>Spoon stop method for MenuBarApps. Deletes all configured menu bars.</p>\n",
        "doc": "Spoon stop method for MenuBarApps. Deletes all configured menu bars.\n\nParameters:\n * None\n\nReturns:\n * None",
        "doc_gfm": "<p>Spoon stop method for MenuBarApps. Deletes all configured menu bars.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "Source/MenuBarApps.spoon/init.lua",
        "lineno": "180",
        "name": "stop",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "MenuBarApps:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "MenuBarApps.apps",
        "def_gfm": "MenuBarApps.apps",
        "desc": "Table containing each application's name and it's desired configuration. The",
        "desc_gfm": "<p>Table containing each application's name and it's desired configuration. The</p>\n",
        "doc": "Table containing each application's name and it's desired configuration. The\nkey of each entry is the name of the App as it appears in the title bar, and\nthe value is a configuration table with the following entries:\n    * title - String with title text to display in the menu bar icon itself\n    * app - Name of the application in EnsureApp config. \n    * action - String with action to take on window when showing. See constants.",
        "doc_gfm": "<p>Table containing each application's name and it's desired configuration. The\nkey of each entry is the name of the App as it appears in the title bar, and\nthe value is a configuration table with the following entries:\n    * title - String with title text to display in the menu bar icon itself\n    * app - Name of the application in EnsureApp config. \n    * action - String with action to take on window when showing. See constants.</p>\n",
        "file": "Source/MenuBarApps.spoon/init.lua",
        "lineno": "22",
        "name": "apps",
        "signature": "MenuBarApps.apps",
        "stripped_doc": "key of each entry is the name of the App as it appears in the title bar, and\nthe value is a configuration table with the following entries:\n    * title - String with title text to display in the menu bar icon itself\n    * app - Name of the application in EnsureApp config. \n    * action - String with action to take on window when showing. See constants.",
        "type": "Variable"
      },
      {
        "def": "MenuBarApps.logger",
        "def_gfm": "MenuBarApps.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log ",
        "desc_gfm": "<p>Logger object used within the Spoon. Can be accessed to set the default log</p>\n",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log \nlevel for the messages coming from the Spoon.",
        "doc_gfm": "<p>Logger object used within the Spoon. Can be accessed to set the default log \nlevel for the messages coming from the Spoon.</p>\n",
        "file": "Source/MenuBarApps.spoon/init.lua",
        "lineno": "32",
        "name": "logger",
        "signature": "MenuBarApps.logger",
        "stripped_doc": "level for the messages coming from the Spoon.",
        "type": "Variable"
      },
      {
        "def": "MenuBarApps.logLevel",
        "def_gfm": "MenuBarApps.logLevel",
        "desc": "MenuBarApps specific log level override, see hs.logger.setLogLevel for options.",
        "desc_gfm": "<p>MenuBarApps specific log level override, see hs.logger.setLogLevel for options.</p>\n",
        "doc": "MenuBarApps specific log level override, see hs.logger.setLogLevel for options.",
        "doc_gfm": "<p>MenuBarApps specific log level override, see hs.logger.setLogLevel for options.</p>\n",
        "file": "Source/MenuBarApps.spoon/init.lua",
        "lineno": "38",
        "name": "logLevel",
        "signature": "MenuBarApps.logLevel",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenuBarApps.menuBars",
        "def_gfm": "MenuBarApps.menuBars",
        "desc": "Table containing references to all of the created menu bars.",
        "desc_gfm": "<p>Table containing references to all of the created menu bars.</p>\n",
        "doc": "Table containing references to all of the created menu bars.",
        "doc_gfm": "<p>Table containing references to all of the created menu bars.</p>\n",
        "file": "Source/MenuBarApps.spoon/init.lua",
        "lineno": "43",
        "name": "menuBars",
        "signature": "MenuBarApps.menuBars",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Control applications from the macOS Menu Bar ",
    "desc_gfm": "<p>Control applications from the macOS Menu Bar</p>\n",
    "doc": "Control applications from the macOS Menu Bar \n\nDownload: https://github.com/adammillerio/Spoons/raw/main/Spoons/MenuBarApps.spoon.zip\n\nREADME with Example Usage: [README.md](https://github.com/adammillerio/MenuBarApps.spoon/blob/main/README.md)",
    "doc_gfm": "<p>Control applications from the macOS Menu Bar</p>\n<p>Download: https://github.com/adammillerio/Spoons/raw/main/Spoons/MenuBarApps.spoon.zip</p>\n<p>README with Example Usage: <a href=\"https://github.com/adammillerio/MenuBarApps.spoon/blob/main/README.md\">README.md</a></p>\n",
    "items": [
      {
        "def": "MenuBarApps.apps",
        "def_gfm": "MenuBarApps.apps",
        "desc": "Table containing each application's name and it's desired configuration. The",
        "desc_gfm": "<p>Table containing each application's name and it's desired configuration. The</p>\n",
        "doc": "Table containing each application's name and it's desired configuration. The\nkey of each entry is the name of the App as it appears in the title bar, and\nthe value is a configuration table with the following entries:\n    * title - String with title text to display in the menu bar icon itself\n    * app - Name of the application in EnsureApp config. \n    * action - String with action to take on window when showing. See constants.",
        "doc_gfm": "<p>Table containing each application's name and it's desired configuration. The\nkey of each entry is the name of the App as it appears in the title bar, and\nthe value is a configuration table with the following entries:\n    * title - String with title text to display in the menu bar icon itself\n    * app - Name of the application in EnsureApp config. \n    * action - String with action to take on window when showing. See constants.</p>\n",
        "file": "Source/MenuBarApps.spoon/init.lua",
        "lineno": "22",
        "name": "apps",
        "signature": "MenuBarApps.apps",
        "stripped_doc": "key of each entry is the name of the App as it appears in the title bar, and\nthe value is a configuration table with the following entries:\n    * title - String with title text to display in the menu bar icon itself\n    * app - Name of the application in EnsureApp config. \n    * action - String with action to take on window when showing. See constants.",
        "type": "Variable"
      },
      {
        "def": "MenuBarApps:init()",
        "def_gfm": "MenuBarApps:init()",
        "desc": "Spoon initializer method for MenuBarApps.",
        "desc_gfm": "<p>Spoon initializer method for MenuBarApps.</p>\n",
        "doc": "Spoon initializer method for MenuBarApps.\n\nParameters:\n * None\n\nReturns:\n * None",
        "doc_gfm": "<p>Spoon initializer method for MenuBarApps.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "Source/MenuBarApps.spoon/init.lua",
        "lineno": "48",
        "name": "init",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "MenuBarApps:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenuBarApps.logger",
        "def_gfm": "MenuBarApps.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log ",
        "desc_gfm": "<p>Logger object used within the Spoon. Can be accessed to set the default log</p>\n",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log \nlevel for the messages coming from the Spoon.",
        "doc_gfm": "<p>Logger object used within the Spoon. Can be accessed to set the default log \nlevel for the messages coming from the Spoon.</p>\n",
        "file": "Source/MenuBarApps.spoon/init.lua",
        "lineno": "32",
        "name": "logger",
        "signature": "MenuBarApps.logger",
        "stripped_doc": "level for the messages coming from the Spoon.",
        "type": "Variable"
      },
      {
        "def": "MenuBarApps.logLevel",
        "def_gfm": "MenuBarApps.logLevel",
        "desc": "MenuBarApps specific log level override, see hs.logger.setLogLevel for options.",
        "desc_gfm": "<p>MenuBarApps specific log level override, see hs.logger.setLogLevel for options.</p>\n",
        "doc": "MenuBarApps specific log level override, see hs.logger.setLogLevel for options.",
        "doc_gfm": "<p>MenuBarApps specific log level override, see hs.logger.setLogLevel for options.</p>\n",
        "file": "Source/MenuBarApps.spoon/init.lua",
        "lineno": "38",
        "name": "logLevel",
        "signature": "MenuBarApps.logLevel",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenuBarApps.menuBars",
        "def_gfm": "MenuBarApps.menuBars",
        "desc": "Table containing references to all of the created menu bars.",
        "desc_gfm": "<p>Table containing references to all of the created menu bars.</p>\n",
        "doc": "Table containing references to all of the created menu bars.",
        "doc_gfm": "<p>Table containing references to all of the created menu bars.</p>\n",
        "file": "Source/MenuBarApps.spoon/init.lua",
        "lineno": "43",
        "name": "menuBars",
        "signature": "MenuBarApps.menuBars",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenuBarApps:start()",
        "def_gfm": "MenuBarApps:start()",
        "desc": "Spoon start method for MenuBarApps. Creates all configured menu bars.",
        "desc_gfm": "<p>Spoon start method for MenuBarApps. Creates all configured menu bars.</p>\n",
        "doc": "Spoon start method for MenuBarApps. Creates all configured menu bars.\n\nParameters:\n * None\n\nReturns:\n * None",
        "doc_gfm": "<p>Spoon start method for MenuBarApps. Creates all configured menu bars.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "Source/MenuBarApps.spoon/init.lua",
        "lineno": "160",
        "name": "start",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "MenuBarApps:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenuBarApps:stop()",
        "def_gfm": "MenuBarApps:stop()",
        "desc": "Spoon stop method for MenuBarApps. Deletes all configured menu bars.",
        "desc_gfm": "<p>Spoon stop method for MenuBarApps. Deletes all configured menu bars.</p>\n",
        "doc": "Spoon stop method for MenuBarApps. Deletes all configured menu bars.\n\nParameters:\n * None\n\nReturns:\n * None",
        "doc_gfm": "<p>Spoon stop method for MenuBarApps. Deletes all configured menu bars.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "Source/MenuBarApps.spoon/init.lua",
        "lineno": "180",
        "name": "stop",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "MenuBarApps:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "MenuBarApps",
    "stripped_doc": "\nDownload: https://github.com/adammillerio/Spoons/raw/main/Spoons/MenuBarApps.spoon.zip\n\nREADME with Example Usage: [README.md](https://github.com/adammillerio/MenuBarApps.spoon/blob/main/README.md)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [
      {
        "def": "SiriSays.notificationCenterBundleID",
        "def_gfm": "SiriSays.notificationCenterBundleID",
        "desc": "Bundle ID of Apple Notification Center, used to detect when \"Type to Siri\"",
        "desc_gfm": "<p>Bundle ID of Apple Notification Center, used to detect when &quot;Type to Siri&quot;</p>\n",
        "doc": "Bundle ID of Apple Notification Center, used to detect when \"Type to Siri\"\nprompt is up.",
        "doc_gfm": "<p>Bundle ID of Apple Notification Center, used to detect when &quot;Type to Siri&quot;\nprompt is up.</p>\n",
        "file": "Source/SiriSays.spoon/init.lua",
        "lineno": "18",
        "name": "notificationCenterBundleID",
        "signature": "SiriSays.notificationCenterBundleID",
        "stripped_doc": "prompt is up.",
        "type": "Constant"
      }
    ],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "SiriSays:siri(prompt)",
        "def_gfm": "SiriSays:siri(prompt)",
        "desc": "Initiate a macro for sending text to Siri.",
        "desc_gfm": "<p>Initiate a macro for sending text to Siri.</p>\n",
        "doc": "Initiate a macro for sending text to Siri.\n\nParameters:\n * prompt - string prompt to send to Siri\n\nReturns:\n * None\n\nNotes:\n * This \"function\" is really a multi-step macro that does the following\n   * Presses Fn+Space to open the TTS prompt\n   * Waits until \"Notification Center\" is the focused application (TTS prompt)\n   * Sends the provided prompt as keystrokes\n   * Presses return to submit prompt\n   * Waits typeToSiriCloseDelay seconds before \"auto closing\" the prompt\n   * Auto close focuses the window from before TTS prompt then clicks the center\n     * Will not occur if prompt is already unfocused\n * This requires the following settings to be enabled\n   * Accessibility\n     * Type to Siri\n       * On\n   * Siri & Spotlight\n     * Siri Responses\n       * Voice Feedback\n         * Off\n       * Always show Siri captions\n         * On\n       * Keyboard Shortcut\n         * Press Fn (Globe) Space",
        "doc_gfm": "<p>Initiate a macro for sending text to Siri.</p>\n<p>Parameters:</p>\n<ul>\n<li>prompt - string prompt to send to Siri</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>This &quot;function&quot; is really a multi-step macro that does the following<ul>\n<li>Presses Fn+Space to open the TTS prompt</li>\n<li>Waits until &quot;Notification Center&quot; is the focused application (TTS prompt)</li>\n<li>Sends the provided prompt as keystrokes</li>\n<li>Presses return to submit prompt</li>\n<li>Waits typeToSiriCloseDelay seconds before &quot;auto closing&quot; the prompt</li>\n<li>Auto close focuses the window from before TTS prompt then clicks the center<ul>\n<li>Will not occur if prompt is already unfocused</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>This requires the following settings to be enabled<ul>\n<li>Accessibility<ul>\n<li>Type to Siri<ul>\n<li>On</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Siri &amp; Spotlight<ul>\n<li>Siri Responses<ul>\n<li>Voice Feedback<ul>\n<li>Off</li>\n</ul>\n</li>\n<li>Always show Siri captions<ul>\n<li>On</li>\n</ul>\n</li>\n<li>Keyboard Shortcut<ul>\n<li>Press Fn (Globe) Space</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
        "examples": [],
        "file": "Source/SiriSays.spoon/init.lua",
        "lineno": "115",
        "name": "siri",
        "notes": [
          " * This \"function\" is really a multi-step macro that does the following",
          "   * Presses Fn+Space to open the TTS prompt",
          "   * Waits until \"Notification Center\" is the focused application (TTS prompt)",
          "   * Sends the provided prompt as keystrokes",
          "   * Presses return to submit prompt",
          "   * Waits typeToSiriCloseDelay seconds before \"auto closing\" the prompt",
          "   * Auto close focuses the window from before TTS prompt then clicks the center",
          "     * Will not occur if prompt is already unfocused",
          " * This requires the following settings to be enabled",
          "   * Accessibility",
          "     * Type to Siri",
          "       * On",
          "   * Siri & Spotlight",
          "     * Siri Responses",
          "       * Voice Feedback",
          "         * Off",
          "       * Always show Siri captions",
          "         * On",
          "       * Keyboard Shortcut",
          "         * Press Fn (Globe) Space"
        ],
        "notes_gfm": "<ul>\n<li>This &quot;function&quot; is really a multi-step macro that does the following<ul>\n<li>Presses Fn+Space to open the TTS prompt</li>\n<li>Waits until &quot;Notification Center&quot; is the focused application (TTS prompt)</li>\n<li>Sends the provided prompt as keystrokes</li>\n<li>Presses return to submit prompt</li>\n<li>Waits typeToSiriCloseDelay seconds before &quot;auto closing&quot; the prompt</li>\n<li>Auto close focuses the window from before TTS prompt then clicks the center<ul>\n<li>Will not occur if prompt is already unfocused</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>This requires the following settings to be enabled<ul>\n<li>Accessibility<ul>\n<li>Type to Siri<ul>\n<li>On</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Siri &amp; Spotlight<ul>\n<li>Siri Responses<ul>\n<li>Voice Feedback<ul>\n<li>Off</li>\n</ul>\n</li>\n<li>Always show Siri captions<ul>\n<li>On</li>\n</ul>\n</li>\n<li>Keyboard Shortcut<ul>\n<li>Press Fn (Globe) Space</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
        "parameters": [
          " * prompt - string prompt to send to Siri"
        ],
        "parameters_gfm": "<ul>\n<li>prompt - string prompt to send to Siri</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "SiriSays:siri(prompt)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SiriSays:siri_cli(args)",
        "def_gfm": "SiriSays:siri_cli(args)",
        "desc": "Initiate a siri prompt from the Hammerspoon CLI.",
        "desc_gfm": "<p>Initiate a siri prompt from the Hammerspoon CLI.</p>\n",
        "doc": "Initiate a siri prompt from the Hammerspoon CLI.\n\nParameters:\n * args - Args provided to hs CLI after \"--\" via _cli.args.\n\nReturns:\n * None\n\nNotes:\n * This is intended to be invoked via the Hammerspoon CLI with the prompt after \n * ie `alias siri='hs -c \"spoon.SiriSays:siri_cli(_cli.args)\" --'`",
        "doc_gfm": "<p>Initiate a siri prompt from the Hammerspoon CLI.</p>\n<p>Parameters:</p>\n<ul>\n<li>args - Args provided to hs CLI after &quot;--&quot; via _cli.args.</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>This is intended to be invoked via the Hammerspoon CLI with the prompt after</li>\n<li>ie <code>alias siri='hs -c &quot;spoon.SiriSays:siri_cli(_cli.args)&quot; --'</code></li>\n</ul>\n",
        "examples": [],
        "file": "Source/SiriSays.spoon/init.lua",
        "lineno": "165",
        "name": "siri_cli",
        "notes": [
          " * This is intended to be invoked via the Hammerspoon CLI with the prompt after ",
          " * ie `alias siri='hs -c \"spoon.SiriSays:siri_cli(_cli.args)\" --'`"
        ],
        "notes_gfm": "<ul>\n<li>This is intended to be invoked via the Hammerspoon CLI with the prompt after</li>\n<li>ie <code>alias siri='hs -c &quot;spoon.SiriSays:siri_cli(_cli.args)&quot; --'</code></li>\n</ul>\n",
        "parameters": [
          " * args - Args provided to hs CLI after \"--\" via _cli.args."
        ],
        "parameters_gfm": "<ul>\n<li>args - Args provided to hs CLI after &quot;--&quot; via _cli.args.</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "SiriSays:siri_cli(args)",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "SiriSays.logger",
        "def_gfm": "SiriSays.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log ",
        "desc_gfm": "<p>Logger object used within the Spoon. Can be accessed to set the default log</p>\n",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log \nlevel for the messages coming from the Spoon.",
        "doc_gfm": "<p>Logger object used within the Spoon. Can be accessed to set the default log \nlevel for the messages coming from the Spoon.</p>\n",
        "file": "Source/SiriSays.spoon/init.lua",
        "lineno": "24",
        "name": "logger",
        "signature": "SiriSays.logger",
        "stripped_doc": "level for the messages coming from the Spoon.",
        "type": "Variable"
      },
      {
        "def": "SiriSays.logLevel",
        "def_gfm": "SiriSays.logLevel",
        "desc": "Spacer specific log level override, see hs.logger.setLogLevel for options.",
        "desc_gfm": "<p>Spacer specific log level override, see hs.logger.setLogLevel for options.</p>\n",
        "doc": "Spacer specific log level override, see hs.logger.setLogLevel for options.",
        "doc_gfm": "<p>Spacer specific log level override, see hs.logger.setLogLevel for options.</p>\n",
        "file": "Source/SiriSays.spoon/init.lua",
        "lineno": "30",
        "name": "logLevel",
        "signature": "SiriSays.logLevel",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SiriSays.previouslyFocusedWindow",
        "def_gfm": "SiriSays.previouslyFocusedWindow",
        "desc": "The previously focused window stored prior to starting the macro, used for",
        "desc_gfm": "<p>The previously focused window stored prior to starting the macro, used for</p>\n",
        "doc": "The previously focused window stored prior to starting the macro, used for\nauto closing the TTS prompt.",
        "doc_gfm": "<p>The previously focused window stored prior to starting the macro, used for\nauto closing the TTS prompt.</p>\n",
        "file": "Source/SiriSays.spoon/init.lua",
        "lineno": "41",
        "name": "previouslyFocusedWindow",
        "signature": "SiriSays.previouslyFocusedWindow",
        "stripped_doc": "auto closing the TTS prompt.",
        "type": "Variable"
      },
      {
        "def": "SiriSays.typeToSiriCloseDelay",
        "def_gfm": "SiriSays.typeToSiriCloseDelay",
        "desc": "int representing the time in seconds to wait before \"auto closing\"",
        "desc_gfm": "<p>int representing the time in seconds to wait before &quot;auto closing&quot;</p>\n",
        "doc": "int representing the time in seconds to wait before \"auto closing\"\nthe Type-to-Siri prompt.",
        "doc_gfm": "<p>int representing the time in seconds to wait before &quot;auto closing&quot;\nthe Type-to-Siri prompt.</p>\n",
        "file": "Source/SiriSays.spoon/init.lua",
        "lineno": "35",
        "name": "typeToSiriCloseDelay",
        "signature": "SiriSays.typeToSiriCloseDelay",
        "stripped_doc": "the Type-to-Siri prompt.",
        "type": "Variable"
      },
      {
        "def": "SiriSays.typeToSiriCloseTimer",
        "def_gfm": "SiriSays.typeToSiriCloseTimer",
        "desc": "hs.timer that waits typeToSiriCloseDelay seconds before auto closing the TTS",
        "desc_gfm": "<p>hs.timer that waits typeToSiriCloseDelay seconds before auto closing the TTS</p>\n",
        "doc": "hs.timer that waits typeToSiriCloseDelay seconds before auto closing the TTS\nprompt.",
        "doc_gfm": "<p>hs.timer that waits typeToSiriCloseDelay seconds before auto closing the TTS\nprompt.</p>\n",
        "file": "Source/SiriSays.spoon/init.lua",
        "lineno": "52",
        "name": "typeToSiriCloseTimer",
        "signature": "SiriSays.typeToSiriCloseTimer",
        "stripped_doc": "prompt.",
        "type": "Variable"
      },
      {
        "def": "SiriSays.typeToSiriOpenTimer",
        "def_gfm": "SiriSays.typeToSiriOpenTimer",
        "desc": "hs.timer that waits unto the TTS prompt is open.",
        "desc_gfm": "<p>hs.timer that waits unto the TTS prompt is open.</p>\n",
        "doc": "hs.timer that waits unto the TTS prompt is open.",
        "doc_gfm": "<p>hs.timer that waits unto the TTS prompt is open.</p>\n",
        "file": "Source/SiriSays.spoon/init.lua",
        "lineno": "47",
        "name": "typeToSiriOpenTimer",
        "signature": "SiriSays.typeToSiriOpenTimer",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Use \"Type to Siri\" through Hammerspoon",
    "desc_gfm": "<p>Use &quot;Type to Siri&quot; through Hammerspoon</p>\n",
    "doc": "Use \"Type to Siri\" through Hammerspoon\n\nDownload: [SiriSays.spoon.zip](https://github.com/adammillerio/Spoons/raw/main/Spoons/SiriSays.spoon.zip)\n\nREADME: [README.md](https://github.com/adammillerio/SiriSays.spoon/blob/main/README.md)",
    "doc_gfm": "<p>Use &quot;Type to Siri&quot; through Hammerspoon</p>\n<p>Download: <a href=\"https://github.com/adammillerio/Spoons/raw/main/Spoons/SiriSays.spoon.zip\">SiriSays.spoon.zip</a></p>\n<p>README: <a href=\"https://github.com/adammillerio/SiriSays.spoon/blob/main/README.md\">README.md</a></p>\n",
    "items": [
      {
        "def": "SiriSays.logger",
        "def_gfm": "SiriSays.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log ",
        "desc_gfm": "<p>Logger object used within the Spoon. Can be accessed to set the default log</p>\n",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log \nlevel for the messages coming from the Spoon.",
        "doc_gfm": "<p>Logger object used within the Spoon. Can be accessed to set the default log \nlevel for the messages coming from the Spoon.</p>\n",
        "file": "Source/SiriSays.spoon/init.lua",
        "lineno": "24",
        "name": "logger",
        "signature": "SiriSays.logger",
        "stripped_doc": "level for the messages coming from the Spoon.",
        "type": "Variable"
      },
      {
        "def": "SiriSays.logLevel",
        "def_gfm": "SiriSays.logLevel",
        "desc": "Spacer specific log level override, see hs.logger.setLogLevel for options.",
        "desc_gfm": "<p>Spacer specific log level override, see hs.logger.setLogLevel for options.</p>\n",
        "doc": "Spacer specific log level override, see hs.logger.setLogLevel for options.",
        "doc_gfm": "<p>Spacer specific log level override, see hs.logger.setLogLevel for options.</p>\n",
        "file": "Source/SiriSays.spoon/init.lua",
        "lineno": "30",
        "name": "logLevel",
        "signature": "SiriSays.logLevel",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "SiriSays.notificationCenterBundleID",
        "def_gfm": "SiriSays.notificationCenterBundleID",
        "desc": "Bundle ID of Apple Notification Center, used to detect when \"Type to Siri\"",
        "desc_gfm": "<p>Bundle ID of Apple Notification Center, used to detect when &quot;Type to Siri&quot;</p>\n",
        "doc": "Bundle ID of Apple Notification Center, used to detect when \"Type to Siri\"\nprompt is up.",
        "doc_gfm": "<p>Bundle ID of Apple Notification Center, used to detect when &quot;Type to Siri&quot;\nprompt is up.</p>\n",
        "file": "Source/SiriSays.spoon/init.lua",
        "lineno": "18",
        "name": "notificationCenterBundleID",
        "signature": "SiriSays.notificationCenterBundleID",
        "stripped_doc": "prompt is up.",
        "type": "Constant"
      },
      {
        "def": "SiriSays.previouslyFocusedWindow",
        "def_gfm": "SiriSays.previouslyFocusedWindow",
        "desc": "The previously focused window stored prior to starting the macro, used for",
        "desc_gfm": "<p>The previously focused window stored prior to starting the macro, used for</p>\n",
        "doc": "The previously focused window stored prior to starting the macro, used for\nauto closing the TTS prompt.",
        "doc_gfm": "<p>The previously focused window stored prior to starting the macro, used for\nauto closing the TTS prompt.</p>\n",
        "file": "Source/SiriSays.spoon/init.lua",
        "lineno": "41",
        "name": "previouslyFocusedWindow",
        "signature": "SiriSays.previouslyFocusedWindow",
        "stripped_doc": "auto closing the TTS prompt.",
        "type": "Variable"
      },
      {
        "def": "SiriSays:siri(prompt)",
        "def_gfm": "SiriSays:siri(prompt)",
        "desc": "Initiate a macro for sending text to Siri.",
        "desc_gfm": "<p>Initiate a macro for sending text to Siri.</p>\n",
        "doc": "Initiate a macro for sending text to Siri.\n\nParameters:\n * prompt - string prompt to send to Siri\n\nReturns:\n * None\n\nNotes:\n * This \"function\" is really a multi-step macro that does the following\n   * Presses Fn+Space to open the TTS prompt\n   * Waits until \"Notification Center\" is the focused application (TTS prompt)\n   * Sends the provided prompt as keystrokes\n   * Presses return to submit prompt\n   * Waits typeToSiriCloseDelay seconds before \"auto closing\" the prompt\n   * Auto close focuses the window from before TTS prompt then clicks the center\n     * Will not occur if prompt is already unfocused\n * This requires the following settings to be enabled\n   * Accessibility\n     * Type to Siri\n       * On\n   * Siri & Spotlight\n     * Siri Responses\n       * Voice Feedback\n         * Off\n       * Always show Siri captions\n         * On\n       * Keyboard Shortcut\n         * Press Fn (Globe) Space",
        "doc_gfm": "<p>Initiate a macro for sending text to Siri.</p>\n<p>Parameters:</p>\n<ul>\n<li>prompt - string prompt to send to Siri</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>This &quot;function&quot; is really a multi-step macro that does the following<ul>\n<li>Presses Fn+Space to open the TTS prompt</li>\n<li>Waits until &quot;Notification Center&quot; is the focused application (TTS prompt)</li>\n<li>Sends the provided prompt as keystrokes</li>\n<li>Presses return to submit prompt</li>\n<li>Waits typeToSiriCloseDelay seconds before &quot;auto closing&quot; the prompt</li>\n<li>Auto close focuses the window from before TTS prompt then clicks the center<ul>\n<li>Will not occur if prompt is already unfocused</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>This requires the following settings to be enabled<ul>\n<li>Accessibility<ul>\n<li>Type to Siri<ul>\n<li>On</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Siri &amp; Spotlight<ul>\n<li>Siri Responses<ul>\n<li>Voice Feedback<ul>\n<li>Off</li>\n</ul>\n</li>\n<li>Always show Siri captions<ul>\n<li>On</li>\n</ul>\n</li>\n<li>Keyboard Shortcut<ul>\n<li>Press Fn (Globe) Space</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
        "examples": [],
        "file": "Source/SiriSays.spoon/init.lua",
        "lineno": "115",
        "name": "siri",
        "notes": [
          " * This \"function\" is really a multi-step macro that does the following",
          "   * Presses Fn+Space to open the TTS prompt",
          "   * Waits until \"Notification Center\" is the focused application (TTS prompt)",
          "   * Sends the provided prompt as keystrokes",
          "   * Presses return to submit prompt",
          "   * Waits typeToSiriCloseDelay seconds before \"auto closing\" the prompt",
          "   * Auto close focuses the window from before TTS prompt then clicks the center",
          "     * Will not occur if prompt is already unfocused",
          " * This requires the following settings to be enabled",
          "   * Accessibility",
          "     * Type to Siri",
          "       * On",
          "   * Siri & Spotlight",
          "     * Siri Responses",
          "       * Voice Feedback",
          "         * Off",
          "       * Always show Siri captions",
          "         * On",
          "       * Keyboard Shortcut",
          "         * Press Fn (Globe) Space"
        ],
        "notes_gfm": "<ul>\n<li>This &quot;function&quot; is really a multi-step macro that does the following<ul>\n<li>Presses Fn+Space to open the TTS prompt</li>\n<li>Waits until &quot;Notification Center&quot; is the focused application (TTS prompt)</li>\n<li>Sends the provided prompt as keystrokes</li>\n<li>Presses return to submit prompt</li>\n<li>Waits typeToSiriCloseDelay seconds before &quot;auto closing&quot; the prompt</li>\n<li>Auto close focuses the window from before TTS prompt then clicks the center<ul>\n<li>Will not occur if prompt is already unfocused</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>This requires the following settings to be enabled<ul>\n<li>Accessibility<ul>\n<li>Type to Siri<ul>\n<li>On</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Siri &amp; Spotlight<ul>\n<li>Siri Responses<ul>\n<li>Voice Feedback<ul>\n<li>Off</li>\n</ul>\n</li>\n<li>Always show Siri captions<ul>\n<li>On</li>\n</ul>\n</li>\n<li>Keyboard Shortcut<ul>\n<li>Press Fn (Globe) Space</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
        "parameters": [
          " * prompt - string prompt to send to Siri"
        ],
        "parameters_gfm": "<ul>\n<li>prompt - string prompt to send to Siri</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "SiriSays:siri(prompt)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SiriSays:siri_cli(args)",
        "def_gfm": "SiriSays:siri_cli(args)",
        "desc": "Initiate a siri prompt from the Hammerspoon CLI.",
        "desc_gfm": "<p>Initiate a siri prompt from the Hammerspoon CLI.</p>\n",
        "doc": "Initiate a siri prompt from the Hammerspoon CLI.\n\nParameters:\n * args - Args provided to hs CLI after \"--\" via _cli.args.\n\nReturns:\n * None\n\nNotes:\n * This is intended to be invoked via the Hammerspoon CLI with the prompt after \n * ie `alias siri='hs -c \"spoon.SiriSays:siri_cli(_cli.args)\" --'`",
        "doc_gfm": "<p>Initiate a siri prompt from the Hammerspoon CLI.</p>\n<p>Parameters:</p>\n<ul>\n<li>args - Args provided to hs CLI after &quot;--&quot; via _cli.args.</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>This is intended to be invoked via the Hammerspoon CLI with the prompt after</li>\n<li>ie <code>alias siri='hs -c &quot;spoon.SiriSays:siri_cli(_cli.args)&quot; --'</code></li>\n</ul>\n",
        "examples": [],
        "file": "Source/SiriSays.spoon/init.lua",
        "lineno": "165",
        "name": "siri_cli",
        "notes": [
          " * This is intended to be invoked via the Hammerspoon CLI with the prompt after ",
          " * ie `alias siri='hs -c \"spoon.SiriSays:siri_cli(_cli.args)\" --'`"
        ],
        "notes_gfm": "<ul>\n<li>This is intended to be invoked via the Hammerspoon CLI with the prompt after</li>\n<li>ie <code>alias siri='hs -c &quot;spoon.SiriSays:siri_cli(_cli.args)&quot; --'</code></li>\n</ul>\n",
        "parameters": [
          " * args - Args provided to hs CLI after \"--\" via _cli.args."
        ],
        "parameters_gfm": "<ul>\n<li>args - Args provided to hs CLI after &quot;--&quot; via _cli.args.</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "SiriSays:siri_cli(args)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "SiriSays.typeToSiriCloseDelay",
        "def_gfm": "SiriSays.typeToSiriCloseDelay",
        "desc": "int representing the time in seconds to wait before \"auto closing\"",
        "desc_gfm": "<p>int representing the time in seconds to wait before &quot;auto closing&quot;</p>\n",
        "doc": "int representing the time in seconds to wait before \"auto closing\"\nthe Type-to-Siri prompt.",
        "doc_gfm": "<p>int representing the time in seconds to wait before &quot;auto closing&quot;\nthe Type-to-Siri prompt.</p>\n",
        "file": "Source/SiriSays.spoon/init.lua",
        "lineno": "35",
        "name": "typeToSiriCloseDelay",
        "signature": "SiriSays.typeToSiriCloseDelay",
        "stripped_doc": "the Type-to-Siri prompt.",
        "type": "Variable"
      },
      {
        "def": "SiriSays.typeToSiriCloseTimer",
        "def_gfm": "SiriSays.typeToSiriCloseTimer",
        "desc": "hs.timer that waits typeToSiriCloseDelay seconds before auto closing the TTS",
        "desc_gfm": "<p>hs.timer that waits typeToSiriCloseDelay seconds before auto closing the TTS</p>\n",
        "doc": "hs.timer that waits typeToSiriCloseDelay seconds before auto closing the TTS\nprompt.",
        "doc_gfm": "<p>hs.timer that waits typeToSiriCloseDelay seconds before auto closing the TTS\nprompt.</p>\n",
        "file": "Source/SiriSays.spoon/init.lua",
        "lineno": "52",
        "name": "typeToSiriCloseTimer",
        "signature": "SiriSays.typeToSiriCloseTimer",
        "stripped_doc": "prompt.",
        "type": "Variable"
      },
      {
        "def": "SiriSays.typeToSiriOpenTimer",
        "def_gfm": "SiriSays.typeToSiriOpenTimer",
        "desc": "hs.timer that waits unto the TTS prompt is open.",
        "desc_gfm": "<p>hs.timer that waits unto the TTS prompt is open.</p>\n",
        "doc": "hs.timer that waits unto the TTS prompt is open.",
        "doc_gfm": "<p>hs.timer that waits unto the TTS prompt is open.</p>\n",
        "file": "Source/SiriSays.spoon/init.lua",
        "lineno": "47",
        "name": "typeToSiriOpenTimer",
        "signature": "SiriSays.typeToSiriOpenTimer",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "name": "SiriSays",
    "stripped_doc": "\nDownload: [SiriSays.spoon.zip](https://github.com/adammillerio/Spoons/raw/main/Spoons/SiriSays.spoon.zip)\n\nREADME: [README.md](https://github.com/adammillerio/SiriSays.spoon/blob/main/README.md)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [
      {
        "def": "Spacer.menuBarAutosaveName",
        "def_gfm": "Spacer.menuBarAutosaveName",
        "desc": "Autosave name used with macOS to save menu bar item position.",
        "desc_gfm": "<p>Autosave name used with macOS to save menu bar item position.</p>\n",
        "doc": "Autosave name used with macOS to save menu bar item position.",
        "doc_gfm": "<p>Autosave name used with macOS to save menu bar item position.</p>\n",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "32",
        "name": "menuBarAutosaveName",
        "signature": "Spacer.menuBarAutosaveName",
        "stripped_doc": "",
        "type": "Constant"
      },
      {
        "def": "Spacer.settingsKey",
        "def_gfm": "Spacer.settingsKey",
        "desc": "Key used for persisting space names between Hammerspoon launches via hs.settings.",
        "desc_gfm": "<p>Key used for persisting space names between Hammerspoon launches via hs.settings.</p>\n",
        "doc": "Key used for persisting space names between Hammerspoon launches via hs.settings.",
        "doc_gfm": "<p>Key used for persisting space names between Hammerspoon launches via hs.settings.</p>\n",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "27",
        "name": "settingsKey",
        "signature": "Spacer.settingsKey",
        "stripped_doc": "",
        "type": "Constant"
      }
    ],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "Spacer:exitFullscreen(window)",
        "def_gfm": "Spacer:exitFullscreen(window)",
        "desc": "Exit fullscreen on window.",
        "desc_gfm": "<p>Exit fullscreen on window.</p>\n",
        "doc": "Exit fullscreen on window.\n\nParameters:\n * None\nReturns:\n * None\n\nNotes:\n * This presses the keystroke cmd+ctrl+f by default, which should work globally\n   * Configurable via exitFullscreenKeystroke",
        "doc_gfm": "<p>Exit fullscreen on window.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>This presses the keystroke cmd+ctrl+f by default, which should work globally<ul>\n<li>Configurable via exitFullscreenKeystroke</li>\n</ul>\n</li>\n</ul>\n",
        "examples": [],
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "526",
        "name": "exitFullscreen",
        "notes": [
          " * This presses the keystroke cmd+ctrl+f by default, which should work globally",
          "   * Configurable via exitFullscreenKeystroke"
        ],
        "notes_gfm": "<ul>\n<li>This presses the keystroke cmd+ctrl+f by default, which should work globally<ul>\n<li>Configurable via exitFullscreenKeystroke</li>\n</ul>\n</li>\n</ul>\n",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "Spacer:exitFullscreen(window)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Spacer:fullscreenWindowToLeft(app)",
        "def_gfm": "Spacer:fullscreenWindowToLeft(app)",
        "desc": "Fullscreen app's focused window to the left of current space.",
        "desc_gfm": "<p>Fullscreen app's focused window to the left of current space.</p>\n",
        "doc": "Fullscreen app's focused window to the left of current space.\n\nParameters:\n * app - hs.application to fullscreen\n\nReturns:\n * None\n\nNotes:\n * Attempts to select Window -> Tile Window to Left of Screen in app menu\n   * Manually configurable via tilingMenuSection and tilingMenuItem\n * If this doesn't work, it will manually macro the OS flow for this\n   * Show the menu for the green resize button in the top left\n   * Press Down, Down, and Return to select Tile Window to Left of Screen\n * Clicks around the top-left of the current screen to exit tiling and fullscreen\n * Returns mouse to original position\n * All credit for this goes to clay_golem on Apple StackExchange\n   * https://apple.stackexchange.com/posts/462160/revisions",
        "doc_gfm": "<p>Fullscreen app's focused window to the left of current space.</p>\n<p>Parameters:</p>\n<ul>\n<li>app - hs.application to fullscreen</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>Attempts to select Window -&gt; Tile Window to Left of Screen in app menu<ul>\n<li>Manually configurable via tilingMenuSection and tilingMenuItem</li>\n</ul>\n</li>\n<li>If this doesn't work, it will manually macro the OS flow for this<ul>\n<li>Show the menu for the green resize button in the top left</li>\n<li>Press Down, Down, and Return to select Tile Window to Left of Screen</li>\n</ul>\n</li>\n<li>Clicks around the top-left of the current screen to exit tiling and fullscreen</li>\n<li>Returns mouse to original position</li>\n<li>All credit for this goes to clay_golem on Apple StackExchange<ul>\n<li>https://apple.stackexchange.com/posts/462160/revisions</li>\n</ul>\n</li>\n</ul>\n",
        "examples": [],
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "495",
        "name": "fullscreenWindowToLeft",
        "notes": [
          " * Attempts to select Window -> Tile Window to Left of Screen in app menu",
          "   * Manually configurable via tilingMenuSection and tilingMenuItem",
          " * If this doesn't work, it will manually macro the OS flow for this",
          "   * Show the menu for the green resize button in the top left",
          "   * Press Down, Down, and Return to select Tile Window to Left of Screen",
          " * Clicks around the top-left of the current screen to exit tiling and fullscreen",
          " * Returns mouse to original position",
          " * All credit for this goes to clay_golem on Apple StackExchange",
          "   * https://apple.stackexchange.com/posts/462160/revisions"
        ],
        "notes_gfm": "<ul>\n<li>Attempts to select Window -&gt; Tile Window to Left of Screen in app menu<ul>\n<li>Manually configurable via tilingMenuSection and tilingMenuItem</li>\n</ul>\n</li>\n<li>If this doesn't work, it will manually macro the OS flow for this<ul>\n<li>Show the menu for the green resize button in the top left</li>\n<li>Press Down, Down, and Return to select Tile Window to Left of Screen</li>\n</ul>\n</li>\n<li>Clicks around the top-left of the current screen to exit tiling and fullscreen</li>\n<li>Returns mouse to original position</li>\n<li>All credit for this goes to clay_golem on Apple StackExchange<ul>\n<li>https://apple.stackexchange.com/posts/462160/revisions</li>\n</ul>\n</li>\n</ul>\n",
        "parameters": [
          " * app - hs.application to fullscreen"
        ],
        "parameters_gfm": "<ul>\n<li>app - hs.application to fullscreen</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "Spacer:fullscreenWindowToLeft(app)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Spacer:init()",
        "def_gfm": "Spacer:init()",
        "desc": "Spoon initializer method for Spacer.",
        "desc_gfm": "<p>Spoon initializer method for Spacer.</p>\n",
        "doc": "Spoon initializer method for Spacer.\n\nParameters:\n * None\n\nReturns:\n * None",
        "doc_gfm": "<p>Spoon initializer method for Spacer.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "600",
        "name": "init",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "Spacer:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Spacer:start()",
        "def_gfm": "Spacer:start()",
        "desc": "Spoon start method for Spacer. Creates/starts menu bar item and space watcher.",
        "desc_gfm": "<p>Spoon start method for Spacer. Creates/starts menu bar item and space watcher.</p>\n",
        "doc": "Spoon start method for Spacer. Creates/starts menu bar item and space watcher.\n\nParameters:\n * None\n\nReturns:\n * None",
        "doc_gfm": "<p>Spoon start method for Spacer. Creates/starts menu bar item and space watcher.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "614",
        "name": "start",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "Spacer:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Spacer:stop()",
        "def_gfm": "Spacer:stop()",
        "desc": "Spoon stop method for Spacer. Deletes menu bar item and stops space watcher.",
        "desc_gfm": "<p>Spoon stop method for Spacer. Deletes menu bar item and stops space watcher.</p>\n",
        "doc": "Spoon stop method for Spacer. Deletes menu bar item and stops space watcher.\n\nParameters:\n * None\n\nReturns:\n * None",
        "doc_gfm": "<p>Spoon stop method for Spacer. Deletes menu bar item and stops space watcher.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "659",
        "name": "stop",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "Spacer:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Spacer:toggleFullscreenWindowToLeft()",
        "def_gfm": "Spacer:toggleFullscreenWindowToLeft()",
        "desc": "Toggle the fullscreen state of current window to left of space.",
        "desc_gfm": "<p>Toggle the fullscreen state of current window to left of space.</p>\n",
        "doc": "Toggle the fullscreen state of current window to left of space.\n\nParameters:\n * args - Args provided to hs CLI after \"--\" via _cli.args.\n\nReturns:\n * None\n\nNotes:\n * This is bound by default to Cmd+Shift+F and will call fullscreenWindowToLeft\n   or exitFullscreen based on the current fullscreen state of the application.",
        "doc_gfm": "<p>Toggle the fullscreen state of current window to left of space.</p>\n<p>Parameters:</p>\n<ul>\n<li>args - Args provided to hs CLI after &quot;--&quot; via _cli.args.</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>This is bound by default to Cmd+Shift+F and will call fullscreenWindowToLeft\nor exitFullscreen based on the current fullscreen state of the application.</li>\n</ul>\n",
        "examples": [],
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "458",
        "name": "toggleFullscreenWindowToLeft",
        "notes": [
          " * This is bound by default to Cmd+Shift+F and will call fullscreenWindowToLeft",
          "   or exitFullscreen based on the current fullscreen state of the application."
        ],
        "notes_gfm": "<ul>\n<li>This is bound by default to Cmd+Shift+F and will call fullscreenWindowToLeft\nor exitFullscreen based on the current fullscreen state of the application.</li>\n</ul>\n",
        "parameters": [
          " * args - Args provided to hs CLI after \"--\" via _cli.args."
        ],
        "parameters_gfm": "<ul>\n<li>args - Args provided to hs CLI after &quot;--&quot; via _cli.args.</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "Spacer:toggleFullscreenWindowToLeft()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "Spacer.defaultHotkeys",
        "def_gfm": "Spacer.defaultHotkeys",
        "desc": "Default hotkey to use for the space chooser and fullscreen ",
        "desc_gfm": "<p>Default hotkey to use for the space chooser and fullscreen</p>\n",
        "doc": "Default hotkey to use for the space chooser and fullscreen \nwhen \"hotkeys\" = \"default\".",
        "doc_gfm": "<p>Default hotkey to use for the space chooser and fullscreen \nwhen &quot;hotkeys&quot; = &quot;default&quot;.</p>\n",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "37",
        "name": "defaultHotkeys",
        "signature": "Spacer.defaultHotkeys",
        "stripped_doc": "when \"hotkeys\" = \"default\".",
        "type": "Variable"
      },
      {
        "def": "Spacer.delayedWindowClickTimer",
        "def_gfm": "Spacer.delayedWindowClickTimer",
        "desc": "hs.timer used in fullscreenWindowToLeft to perform a delayed left click.",
        "desc_gfm": "<p>hs.timer used in fullscreenWindowToLeft to perform a delayed left click.</p>\n",
        "doc": "hs.timer used in fullscreenWindowToLeft to perform a delayed left click.",
        "doc_gfm": "<p>hs.timer used in fullscreenWindowToLeft to perform a delayed left click.</p>\n",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "110",
        "name": "delayedWindowClickTimer",
        "signature": "Spacer.delayedWindowClickTimer",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Spacer.exitFullScreenKeystroke",
        "def_gfm": "Spacer.exitFullScreenKeystroke",
        "desc": "Keystroke representing shortcut to exit a full screen application. Defaults to",
        "desc_gfm": "<p>Keystroke representing shortcut to exit a full screen application. Defaults to</p>\n",
        "doc": "Keystroke representing shortcut to exit a full screen application. Defaults to\nCmd+Ctrl+F which has worked for all applications so far.",
        "doc_gfm": "<p>Keystroke representing shortcut to exit a full screen application. Defaults to\nCmd+Ctrl+F which has worked for all applications so far.</p>\n",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "56",
        "name": "exitFullScreenKeystroke",
        "signature": "Spacer.exitFullScreenKeystroke",
        "stripped_doc": "Cmd+Ctrl+F which has worked for all applications so far.",
        "type": "Variable"
      },
      {
        "def": "Spacer.focusedSpace",
        "def_gfm": "Spacer.focusedSpace",
        "desc": "int with the ID of the currently focused space.",
        "desc_gfm": "<p>int with the ID of the currently focused space.</p>\n",
        "doc": "int with the ID of the currently focused space.",
        "doc_gfm": "<p>int with the ID of the currently focused space.</p>\n",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "100",
        "name": "focusedSpace",
        "signature": "Spacer.focusedSpace",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Spacer.logger",
        "def_gfm": "Spacer.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log ",
        "desc_gfm": "<p>Logger object used within the Spoon. Can be accessed to set the default log</p>\n",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log \nlevel for the messages coming from the Spoon.",
        "doc_gfm": "<p>Logger object used within the Spoon. Can be accessed to set the default log \nlevel for the messages coming from the Spoon.</p>\n",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "62",
        "name": "logger",
        "signature": "Spacer.logger",
        "stripped_doc": "level for the messages coming from the Spoon.",
        "type": "Variable"
      },
      {
        "def": "Spacer.logLevel",
        "def_gfm": "Spacer.logLevel",
        "desc": "Spacer specific log level override, see hs.logger.setLogLevel for options.",
        "desc_gfm": "<p>Spacer specific log level override, see hs.logger.setLogLevel for options.</p>\n",
        "doc": "Spacer specific log level override, see hs.logger.setLogLevel for options.",
        "doc_gfm": "<p>Spacer specific log level override, see hs.logger.setLogLevel for options.</p>\n",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "68",
        "name": "logLevel",
        "signature": "Spacer.logLevel",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Spacer.menuBar",
        "def_gfm": "Spacer.menuBar",
        "desc": "hs.menubar representing the menu bar for Spacer.",
        "desc_gfm": "<p>hs.menubar representing the menu bar for Spacer.</p>\n",
        "doc": "hs.menubar representing the menu bar for Spacer.",
        "doc_gfm": "<p>hs.menubar representing the menu bar for Spacer.</p>\n",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "73",
        "name": "menuBar",
        "signature": "Spacer.menuBar",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Spacer.orderedSpaceNames",
        "def_gfm": "Spacer.orderedSpaceNames",
        "desc": "Table with an ordered list of the space names, which is used when loading",
        "desc_gfm": "<p>Table with an ordered list of the space names, which is used when loading</p>\n",
        "doc": "Table with an ordered list of the space names, which is used when loading\nthe menubar, as well as persisted to and from hs.settings between loads.",
        "doc_gfm": "<p>Table with an ordered list of the space names, which is used when loading\nthe menubar, as well as persisted to and from hs.settings between loads.</p>\n",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "94",
        "name": "orderedSpaceNames",
        "signature": "Spacer.orderedSpaceNames",
        "stripped_doc": "the menubar, as well as persisted to and from hs.settings between loads.",
        "type": "Variable"
      },
      {
        "def": "Spacer.orderedSpaces",
        "def_gfm": "Spacer.orderedSpaces",
        "desc": "Table holding an ordered list of space IDs, which is then used to resolve",
        "desc_gfm": "<p>Table holding an ordered list of space IDs, which is then used to resolve</p>\n",
        "doc": "Table holding an ordered list of space IDs, which is then used to resolve\nactual space names for IDs from Spacer.spaceNames.",
        "doc_gfm": "<p>Table holding an ordered list of space IDs, which is then used to resolve\nactual space names for IDs from Spacer.spaceNames.</p>\n",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "88",
        "name": "orderedSpaces",
        "signature": "Spacer.orderedSpaces",
        "stripped_doc": "actual space names for IDs from Spacer.spaceNames.",
        "type": "Variable"
      },
      {
        "def": "Spacer.spaceChooser",
        "def_gfm": "Spacer.spaceChooser",
        "desc": "hs.chooser object representing the Space chooser.",
        "desc_gfm": "<p>hs.chooser object representing the Space chooser.</p>\n",
        "doc": "hs.chooser object representing the Space chooser.",
        "doc_gfm": "<p>hs.chooser object representing the Space chooser.</p>\n",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "105",
        "name": "spaceChooser",
        "signature": "Spacer.spaceChooser",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Spacer.spaceNames",
        "def_gfm": "Spacer.spaceNames",
        "desc": "Table with key-value mapping of Space ID to it's user set name.",
        "desc_gfm": "<p>Table with key-value mapping of Space ID to it's user set name.</p>\n",
        "doc": "Table with key-value mapping of Space ID to it's user set name.",
        "doc_gfm": "<p>Table with key-value mapping of Space ID to it's user set name.</p>\n",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "83",
        "name": "spaceNames",
        "signature": "Spacer.spaceNames",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Spacer.spaceWatcher",
        "def_gfm": "Spacer.spaceWatcher",
        "desc": "hs.spaces.watcher instance used for monitoring for space changes.",
        "desc_gfm": "<p>hs.spaces.watcher instance used for monitoring for space changes.</p>\n",
        "doc": "hs.spaces.watcher instance used for monitoring for space changes.",
        "doc_gfm": "<p>hs.spaces.watcher instance used for monitoring for space changes.</p>\n",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "78",
        "name": "spaceWatcher",
        "signature": "Spacer.spaceWatcher",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Spacer.tilingMenuItem",
        "def_gfm": "Spacer.tilingMenuItem",
        "desc": "Menu item for tiling window to the left. Set this according to your language.",
        "desc_gfm": "<p>Menu item for tiling window to the left. Set this according to your language.</p>\n",
        "doc": "Menu item for tiling window to the left. Set this according to your language.",
        "doc_gfm": "<p>Menu item for tiling window to the left. Set this according to your language.</p>\n",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "51",
        "name": "tilingMenuItem",
        "signature": "Spacer.tilingMenuItem",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Spacer.tilingMenuSection",
        "def_gfm": "Spacer.tilingMenuSection",
        "desc": "Menu \"section\" which has tiling options. Set this according to your language.",
        "desc_gfm": "<p>Menu &quot;section&quot; which has tiling options. Set this according to your language.</p>\n",
        "doc": "Menu \"section\" which has tiling options. Set this according to your language.",
        "doc_gfm": "<p>Menu &quot;section&quot; which has tiling options. Set this according to your language.</p>\n",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "46",
        "name": "tilingMenuSection",
        "signature": "Spacer.tilingMenuSection",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Name and switch Mission Control spaces in the menu bar, with fullscreen support!",
    "desc_gfm": "<p>Name and switch Mission Control spaces in the menu bar, with fullscreen support!</p>\n",
    "doc": "Name and switch Mission Control spaces in the menu bar, with fullscreen support!\n\nDownload: [Spacer.spoon.zip](https://github.com/adammillerio/Spoons/raw/main/Spoons/Spacer.spoon.zip)\n\nREADME: [README.md](https://github.com/adammillerio/Spacer.spoon/blob/main/README.md)\n\nSpace names can be changed from the menubar by holding Alt while selecting\nthe desired space to rename. These are persisted between launches via the\nhs.settings module.\n\nA GUI based space \"chooser\" can be opened space_chooser hotkey (default cmd+space)\n\nCurrent application can be put in fullscreen to the left of the current space\nvia the toggle_fullscreen_window_to_left hotkey (default cmd+shift+f)",
    "doc_gfm": "<p>Name and switch Mission Control spaces in the menu bar, with fullscreen support!</p>\n<p>Download: <a href=\"https://github.com/adammillerio/Spoons/raw/main/Spoons/Spacer.spoon.zip\">Spacer.spoon.zip</a></p>\n<p>README: <a href=\"https://github.com/adammillerio/Spacer.spoon/blob/main/README.md\">README.md</a></p>\n<p>Space names can be changed from the menubar by holding Alt while selecting\nthe desired space to rename. These are persisted between launches via the\nhs.settings module.</p>\n<p>A GUI based space &quot;chooser&quot; can be opened space_chooser hotkey (default cmd+space)</p>\n<p>Current application can be put in fullscreen to the left of the current space\nvia the toggle_fullscreen_window_to_left hotkey (default cmd+shift+f)</p>\n",
    "items": [
      {
        "def": "Spacer.defaultHotkeys",
        "def_gfm": "Spacer.defaultHotkeys",
        "desc": "Default hotkey to use for the space chooser and fullscreen ",
        "desc_gfm": "<p>Default hotkey to use for the space chooser and fullscreen</p>\n",
        "doc": "Default hotkey to use for the space chooser and fullscreen \nwhen \"hotkeys\" = \"default\".",
        "doc_gfm": "<p>Default hotkey to use for the space chooser and fullscreen \nwhen &quot;hotkeys&quot; = &quot;default&quot;.</p>\n",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "37",
        "name": "defaultHotkeys",
        "signature": "Spacer.defaultHotkeys",
        "stripped_doc": "when \"hotkeys\" = \"default\".",
        "type": "Variable"
      },
      {
        "def": "Spacer.delayedWindowClickTimer",
        "def_gfm": "Spacer.delayedWindowClickTimer",
        "desc": "hs.timer used in fullscreenWindowToLeft to perform a delayed left click.",
        "desc_gfm": "<p>hs.timer used in fullscreenWindowToLeft to perform a delayed left click.</p>\n",
        "doc": "hs.timer used in fullscreenWindowToLeft to perform a delayed left click.",
        "doc_gfm": "<p>hs.timer used in fullscreenWindowToLeft to perform a delayed left click.</p>\n",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "110",
        "name": "delayedWindowClickTimer",
        "signature": "Spacer.delayedWindowClickTimer",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Spacer:exitFullscreen(window)",
        "def_gfm": "Spacer:exitFullscreen(window)",
        "desc": "Exit fullscreen on window.",
        "desc_gfm": "<p>Exit fullscreen on window.</p>\n",
        "doc": "Exit fullscreen on window.\n\nParameters:\n * None\nReturns:\n * None\n\nNotes:\n * This presses the keystroke cmd+ctrl+f by default, which should work globally\n   * Configurable via exitFullscreenKeystroke",
        "doc_gfm": "<p>Exit fullscreen on window.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>This presses the keystroke cmd+ctrl+f by default, which should work globally<ul>\n<li>Configurable via exitFullscreenKeystroke</li>\n</ul>\n</li>\n</ul>\n",
        "examples": [],
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "526",
        "name": "exitFullscreen",
        "notes": [
          " * This presses the keystroke cmd+ctrl+f by default, which should work globally",
          "   * Configurable via exitFullscreenKeystroke"
        ],
        "notes_gfm": "<ul>\n<li>This presses the keystroke cmd+ctrl+f by default, which should work globally<ul>\n<li>Configurable via exitFullscreenKeystroke</li>\n</ul>\n</li>\n</ul>\n",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "Spacer:exitFullscreen(window)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Spacer.exitFullScreenKeystroke",
        "def_gfm": "Spacer.exitFullScreenKeystroke",
        "desc": "Keystroke representing shortcut to exit a full screen application. Defaults to",
        "desc_gfm": "<p>Keystroke representing shortcut to exit a full screen application. Defaults to</p>\n",
        "doc": "Keystroke representing shortcut to exit a full screen application. Defaults to\nCmd+Ctrl+F which has worked for all applications so far.",
        "doc_gfm": "<p>Keystroke representing shortcut to exit a full screen application. Defaults to\nCmd+Ctrl+F which has worked for all applications so far.</p>\n",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "56",
        "name": "exitFullScreenKeystroke",
        "signature": "Spacer.exitFullScreenKeystroke",
        "stripped_doc": "Cmd+Ctrl+F which has worked for all applications so far.",
        "type": "Variable"
      },
      {
        "def": "Spacer.focusedSpace",
        "def_gfm": "Spacer.focusedSpace",
        "desc": "int with the ID of the currently focused space.",
        "desc_gfm": "<p>int with the ID of the currently focused space.</p>\n",
        "doc": "int with the ID of the currently focused space.",
        "doc_gfm": "<p>int with the ID of the currently focused space.</p>\n",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "100",
        "name": "focusedSpace",
        "signature": "Spacer.focusedSpace",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Spacer:fullscreenWindowToLeft(app)",
        "def_gfm": "Spacer:fullscreenWindowToLeft(app)",
        "desc": "Fullscreen app's focused window to the left of current space.",
        "desc_gfm": "<p>Fullscreen app's focused window to the left of current space.</p>\n",
        "doc": "Fullscreen app's focused window to the left of current space.\n\nParameters:\n * app - hs.application to fullscreen\n\nReturns:\n * None\n\nNotes:\n * Attempts to select Window -> Tile Window to Left of Screen in app menu\n   * Manually configurable via tilingMenuSection and tilingMenuItem\n * If this doesn't work, it will manually macro the OS flow for this\n   * Show the menu for the green resize button in the top left\n   * Press Down, Down, and Return to select Tile Window to Left of Screen\n * Clicks around the top-left of the current screen to exit tiling and fullscreen\n * Returns mouse to original position\n * All credit for this goes to clay_golem on Apple StackExchange\n   * https://apple.stackexchange.com/posts/462160/revisions",
        "doc_gfm": "<p>Fullscreen app's focused window to the left of current space.</p>\n<p>Parameters:</p>\n<ul>\n<li>app - hs.application to fullscreen</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>Attempts to select Window -&gt; Tile Window to Left of Screen in app menu<ul>\n<li>Manually configurable via tilingMenuSection and tilingMenuItem</li>\n</ul>\n</li>\n<li>If this doesn't work, it will manually macro the OS flow for this<ul>\n<li>Show the menu for the green resize button in the top left</li>\n<li>Press Down, Down, and Return to select Tile Window to Left of Screen</li>\n</ul>\n</li>\n<li>Clicks around the top-left of the current screen to exit tiling and fullscreen</li>\n<li>Returns mouse to original position</li>\n<li>All credit for this goes to clay_golem on Apple StackExchange<ul>\n<li>https://apple.stackexchange.com/posts/462160/revisions</li>\n</ul>\n</li>\n</ul>\n",
        "examples": [],
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "495",
        "name": "fullscreenWindowToLeft",
        "notes": [
          " * Attempts to select Window -> Tile Window to Left of Screen in app menu",
          "   * Manually configurable via tilingMenuSection and tilingMenuItem",
          " * If this doesn't work, it will manually macro the OS flow for this",
          "   * Show the menu for the green resize button in the top left",
          "   * Press Down, Down, and Return to select Tile Window to Left of Screen",
          " * Clicks around the top-left of the current screen to exit tiling and fullscreen",
          " * Returns mouse to original position",
          " * All credit for this goes to clay_golem on Apple StackExchange",
          "   * https://apple.stackexchange.com/posts/462160/revisions"
        ],
        "notes_gfm": "<ul>\n<li>Attempts to select Window -&gt; Tile Window to Left of Screen in app menu<ul>\n<li>Manually configurable via tilingMenuSection and tilingMenuItem</li>\n</ul>\n</li>\n<li>If this doesn't work, it will manually macro the OS flow for this<ul>\n<li>Show the menu for the green resize button in the top left</li>\n<li>Press Down, Down, and Return to select Tile Window to Left of Screen</li>\n</ul>\n</li>\n<li>Clicks around the top-left of the current screen to exit tiling and fullscreen</li>\n<li>Returns mouse to original position</li>\n<li>All credit for this goes to clay_golem on Apple StackExchange<ul>\n<li>https://apple.stackexchange.com/posts/462160/revisions</li>\n</ul>\n</li>\n</ul>\n",
        "parameters": [
          " * app - hs.application to fullscreen"
        ],
        "parameters_gfm": "<ul>\n<li>app - hs.application to fullscreen</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "Spacer:fullscreenWindowToLeft(app)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Spacer:init()",
        "def_gfm": "Spacer:init()",
        "desc": "Spoon initializer method for Spacer.",
        "desc_gfm": "<p>Spoon initializer method for Spacer.</p>\n",
        "doc": "Spoon initializer method for Spacer.\n\nParameters:\n * None\n\nReturns:\n * None",
        "doc_gfm": "<p>Spoon initializer method for Spacer.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "600",
        "name": "init",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "Spacer:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Spacer.logger",
        "def_gfm": "Spacer.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log ",
        "desc_gfm": "<p>Logger object used within the Spoon. Can be accessed to set the default log</p>\n",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log \nlevel for the messages coming from the Spoon.",
        "doc_gfm": "<p>Logger object used within the Spoon. Can be accessed to set the default log \nlevel for the messages coming from the Spoon.</p>\n",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "62",
        "name": "logger",
        "signature": "Spacer.logger",
        "stripped_doc": "level for the messages coming from the Spoon.",
        "type": "Variable"
      },
      {
        "def": "Spacer.logLevel",
        "def_gfm": "Spacer.logLevel",
        "desc": "Spacer specific log level override, see hs.logger.setLogLevel for options.",
        "desc_gfm": "<p>Spacer specific log level override, see hs.logger.setLogLevel for options.</p>\n",
        "doc": "Spacer specific log level override, see hs.logger.setLogLevel for options.",
        "doc_gfm": "<p>Spacer specific log level override, see hs.logger.setLogLevel for options.</p>\n",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "68",
        "name": "logLevel",
        "signature": "Spacer.logLevel",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Spacer.menuBar",
        "def_gfm": "Spacer.menuBar",
        "desc": "hs.menubar representing the menu bar for Spacer.",
        "desc_gfm": "<p>hs.menubar representing the menu bar for Spacer.</p>\n",
        "doc": "hs.menubar representing the menu bar for Spacer.",
        "doc_gfm": "<p>hs.menubar representing the menu bar for Spacer.</p>\n",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "73",
        "name": "menuBar",
        "signature": "Spacer.menuBar",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Spacer.menuBarAutosaveName",
        "def_gfm": "Spacer.menuBarAutosaveName",
        "desc": "Autosave name used with macOS to save menu bar item position.",
        "desc_gfm": "<p>Autosave name used with macOS to save menu bar item position.</p>\n",
        "doc": "Autosave name used with macOS to save menu bar item position.",
        "doc_gfm": "<p>Autosave name used with macOS to save menu bar item position.</p>\n",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "32",
        "name": "menuBarAutosaveName",
        "signature": "Spacer.menuBarAutosaveName",
        "stripped_doc": "",
        "type": "Constant"
      },
      {
        "def": "Spacer.orderedSpaceNames",
        "def_gfm": "Spacer.orderedSpaceNames",
        "desc": "Table with an ordered list of the space names, which is used when loading",
        "desc_gfm": "<p>Table with an ordered list of the space names, which is used when loading</p>\n",
        "doc": "Table with an ordered list of the space names, which is used when loading\nthe menubar, as well as persisted to and from hs.settings between loads.",
        "doc_gfm": "<p>Table with an ordered list of the space names, which is used when loading\nthe menubar, as well as persisted to and from hs.settings between loads.</p>\n",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "94",
        "name": "orderedSpaceNames",
        "signature": "Spacer.orderedSpaceNames",
        "stripped_doc": "the menubar, as well as persisted to and from hs.settings between loads.",
        "type": "Variable"
      },
      {
        "def": "Spacer.orderedSpaces",
        "def_gfm": "Spacer.orderedSpaces",
        "desc": "Table holding an ordered list of space IDs, which is then used to resolve",
        "desc_gfm": "<p>Table holding an ordered list of space IDs, which is then used to resolve</p>\n",
        "doc": "Table holding an ordered list of space IDs, which is then used to resolve\nactual space names for IDs from Spacer.spaceNames.",
        "doc_gfm": "<p>Table holding an ordered list of space IDs, which is then used to resolve\nactual space names for IDs from Spacer.spaceNames.</p>\n",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "88",
        "name": "orderedSpaces",
        "signature": "Spacer.orderedSpaces",
        "stripped_doc": "actual space names for IDs from Spacer.spaceNames.",
        "type": "Variable"
      },
      {
        "def": "Spacer.settingsKey",
        "def_gfm": "Spacer.settingsKey",
        "desc": "Key used for persisting space names between Hammerspoon launches via hs.settings.",
        "desc_gfm": "<p>Key used for persisting space names between Hammerspoon launches via hs.settings.</p>\n",
        "doc": "Key used for persisting space names between Hammerspoon launches via hs.settings.",
        "doc_gfm": "<p>Key used for persisting space names between Hammerspoon launches via hs.settings.</p>\n",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "27",
        "name": "settingsKey",
        "signature": "Spacer.settingsKey",
        "stripped_doc": "",
        "type": "Constant"
      },
      {
        "def": "Spacer.spaceChooser",
        "def_gfm": "Spacer.spaceChooser",
        "desc": "hs.chooser object representing the Space chooser.",
        "desc_gfm": "<p>hs.chooser object representing the Space chooser.</p>\n",
        "doc": "hs.chooser object representing the Space chooser.",
        "doc_gfm": "<p>hs.chooser object representing the Space chooser.</p>\n",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "105",
        "name": "spaceChooser",
        "signature": "Spacer.spaceChooser",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Spacer.spaceNames",
        "def_gfm": "Spacer.spaceNames",
        "desc": "Table with key-value mapping of Space ID to it's user set name.",
        "desc_gfm": "<p>Table with key-value mapping of Space ID to it's user set name.</p>\n",
        "doc": "Table with key-value mapping of Space ID to it's user set name.",
        "doc_gfm": "<p>Table with key-value mapping of Space ID to it's user set name.</p>\n",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "83",
        "name": "spaceNames",
        "signature": "Spacer.spaceNames",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Spacer.spaceWatcher",
        "def_gfm": "Spacer.spaceWatcher",
        "desc": "hs.spaces.watcher instance used for monitoring for space changes.",
        "desc_gfm": "<p>hs.spaces.watcher instance used for monitoring for space changes.</p>\n",
        "doc": "hs.spaces.watcher instance used for monitoring for space changes.",
        "doc_gfm": "<p>hs.spaces.watcher instance used for monitoring for space changes.</p>\n",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "78",
        "name": "spaceWatcher",
        "signature": "Spacer.spaceWatcher",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Spacer:start()",
        "def_gfm": "Spacer:start()",
        "desc": "Spoon start method for Spacer. Creates/starts menu bar item and space watcher.",
        "desc_gfm": "<p>Spoon start method for Spacer. Creates/starts menu bar item and space watcher.</p>\n",
        "doc": "Spoon start method for Spacer. Creates/starts menu bar item and space watcher.\n\nParameters:\n * None\n\nReturns:\n * None",
        "doc_gfm": "<p>Spoon start method for Spacer. Creates/starts menu bar item and space watcher.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "614",
        "name": "start",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "Spacer:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Spacer:stop()",
        "def_gfm": "Spacer:stop()",
        "desc": "Spoon stop method for Spacer. Deletes menu bar item and stops space watcher.",
        "desc_gfm": "<p>Spoon stop method for Spacer. Deletes menu bar item and stops space watcher.</p>\n",
        "doc": "Spoon stop method for Spacer. Deletes menu bar item and stops space watcher.\n\nParameters:\n * None\n\nReturns:\n * None",
        "doc_gfm": "<p>Spoon stop method for Spacer. Deletes menu bar item and stops space watcher.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "659",
        "name": "stop",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "Spacer:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Spacer.tilingMenuItem",
        "def_gfm": "Spacer.tilingMenuItem",
        "desc": "Menu item for tiling window to the left. Set this according to your language.",
        "desc_gfm": "<p>Menu item for tiling window to the left. Set this according to your language.</p>\n",
        "doc": "Menu item for tiling window to the left. Set this according to your language.",
        "doc_gfm": "<p>Menu item for tiling window to the left. Set this according to your language.</p>\n",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "51",
        "name": "tilingMenuItem",
        "signature": "Spacer.tilingMenuItem",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Spacer.tilingMenuSection",
        "def_gfm": "Spacer.tilingMenuSection",
        "desc": "Menu \"section\" which has tiling options. Set this according to your language.",
        "desc_gfm": "<p>Menu &quot;section&quot; which has tiling options. Set this according to your language.</p>\n",
        "doc": "Menu \"section\" which has tiling options. Set this according to your language.",
        "doc_gfm": "<p>Menu &quot;section&quot; which has tiling options. Set this according to your language.</p>\n",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "46",
        "name": "tilingMenuSection",
        "signature": "Spacer.tilingMenuSection",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Spacer:toggleFullscreenWindowToLeft()",
        "def_gfm": "Spacer:toggleFullscreenWindowToLeft()",
        "desc": "Toggle the fullscreen state of current window to left of space.",
        "desc_gfm": "<p>Toggle the fullscreen state of current window to left of space.</p>\n",
        "doc": "Toggle the fullscreen state of current window to left of space.\n\nParameters:\n * args - Args provided to hs CLI after \"--\" via _cli.args.\n\nReturns:\n * None\n\nNotes:\n * This is bound by default to Cmd+Shift+F and will call fullscreenWindowToLeft\n   or exitFullscreen based on the current fullscreen state of the application.",
        "doc_gfm": "<p>Toggle the fullscreen state of current window to left of space.</p>\n<p>Parameters:</p>\n<ul>\n<li>args - Args provided to hs CLI after &quot;--&quot; via _cli.args.</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>This is bound by default to Cmd+Shift+F and will call fullscreenWindowToLeft\nor exitFullscreen based on the current fullscreen state of the application.</li>\n</ul>\n",
        "examples": [],
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "458",
        "name": "toggleFullscreenWindowToLeft",
        "notes": [
          " * This is bound by default to Cmd+Shift+F and will call fullscreenWindowToLeft",
          "   or exitFullscreen based on the current fullscreen state of the application."
        ],
        "notes_gfm": "<ul>\n<li>This is bound by default to Cmd+Shift+F and will call fullscreenWindowToLeft\nor exitFullscreen based on the current fullscreen state of the application.</li>\n</ul>\n",
        "parameters": [
          " * args - Args provided to hs CLI after \"--\" via _cli.args."
        ],
        "parameters_gfm": "<ul>\n<li>args - Args provided to hs CLI after &quot;--&quot; via _cli.args.</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "Spacer:toggleFullscreenWindowToLeft()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "Spacer",
    "stripped_doc": "\nDownload: [Spacer.spoon.zip](https://github.com/adammillerio/Spoons/raw/main/Spoons/Spacer.spoon.zip)\n\nREADME: [README.md](https://github.com/adammillerio/Spacer.spoon/blob/main/README.md)\n\nSpace names can be changed from the menubar by holding Alt while selecting\nthe desired space to rename. These are persisted between launches via the\nhs.settings module.\n\nA GUI based space \"chooser\" can be opened space_chooser hotkey (default cmd+space)\n\nCurrent application can be put in fullscreen to the left of the current space\nvia the toggle_fullscreen_window_to_left hotkey (default cmd+shift+f)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "Sweeper:init()",
        "def_gfm": "Sweeper:init()",
        "desc": "Spoon initializer method for Sweeper.",
        "desc_gfm": "<p>Spoon initializer method for Sweeper.</p>\n",
        "doc": "Spoon initializer method for Sweeper.\n\nParameters:\n * None\n\nReturns:\n * None",
        "doc_gfm": "<p>Spoon initializer method for Sweeper.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "Source/Sweeper.spoon/init.lua",
        "lineno": "67",
        "name": "init",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "Sweeper:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Sweeper:start()",
        "def_gfm": "Sweeper:start()",
        "desc": "Spoon start method for Sweeper.",
        "desc_gfm": "<p>Spoon start method for Sweeper.</p>\n",
        "doc": "Spoon start method for Sweeper.\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * Configures the window filter, and subscribes to all window unfocus events.",
        "doc_gfm": "<p>Spoon start method for Sweeper.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>Configures the window filter, and subscribes to all window unfocus events.</li>\n</ul>\n",
        "examples": [],
        "file": "Source/Sweeper.spoon/init.lua",
        "lineno": "146",
        "name": "start",
        "notes": [
          " * Configures the window filter, and subscribes to all window unfocus events."
        ],
        "notes_gfm": "<ul>\n<li>Configures the window filter, and subscribes to all window unfocus events.</li>\n</ul>\n",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "Sweeper:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Sweeper:stop()",
        "def_gfm": "Sweeper:stop()",
        "desc": "Spoon stop method for Sweeper.",
        "desc_gfm": "<p>Spoon stop method for Sweeper.</p>\n",
        "doc": "Spoon stop method for Sweeper.\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * Unsubscribes the window filter from all subscribed functions.",
        "doc_gfm": "<p>Spoon stop method for Sweeper.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>Unsubscribes the window filter from all subscribed functions.</li>\n</ul>\n",
        "examples": [],
        "file": "Source/Sweeper.spoon/init.lua",
        "lineno": "179",
        "name": "stop",
        "notes": [
          " * Unsubscribes the window filter from all subscribed functions."
        ],
        "notes_gfm": "<ul>\n<li>Unsubscribes the window filter from all subscribed functions.</li>\n</ul>\n",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "Sweeper:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "Sweeper.apps",
        "def_gfm": "Sweeper.apps",
        "desc": "Table containing each application's name and it's desired configuration. The",
        "desc_gfm": "<p>Table containing each application's name and it's desired configuration. The</p>\n",
        "doc": "Table containing each application's name and it's desired configuration. The\nkey of each entry is the name of the application, and the value is a\nconfiguration table with the following entries:\n * sweep - If true, this application will be swept.\n * sweepCheckInterval - Override time in seconds for global `Sweeper.sweepCheckInterval`.",
        "doc_gfm": "<p>Table containing each application's name and it's desired configuration. The\nkey of each entry is the name of the application, and the value is a\nconfiguration table with the following entries:</p>\n<ul>\n<li>sweep - If true, this application will be swept.</li>\n<li>sweepCheckInterval - Override time in seconds for global <code>Sweeper.sweepCheckInterval</code>.</li>\n</ul>\n",
        "file": "Source/Sweeper.spoon/init.lua",
        "lineno": "29",
        "name": "apps",
        "signature": "Sweeper.apps",
        "stripped_doc": "key of each entry is the name of the application, and the value is a\nconfiguration table with the following entries:\n * sweep - If true, this application will be swept.\n * sweepCheckInterval - Override time in seconds for global `Sweeper.sweepCheckInterval`.",
        "type": "Variable"
      },
      {
        "def": "Sweeper.logger",
        "def_gfm": "Sweeper.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log",
        "desc_gfm": "<p>Logger object used within the Spoon. Can be accessed to set the default log</p>\n",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log\nlevel for the messages coming from the Spoon.",
        "doc_gfm": "<p>Logger object used within the Spoon. Can be accessed to set the default log\nlevel for the messages coming from the Spoon.</p>\n",
        "file": "Source/Sweeper.spoon/init.lua",
        "lineno": "43",
        "name": "logger",
        "signature": "Sweeper.logger",
        "stripped_doc": "level for the messages coming from the Spoon.",
        "type": "Variable"
      },
      {
        "def": "Sweeper.logLevel",
        "def_gfm": "Sweeper.logLevel",
        "desc": "Sweeper specific log level override, see hs.logger.setLogLevel for options.",
        "desc_gfm": "<p>Sweeper specific log level override, see hs.logger.setLogLevel for options.</p>\n",
        "doc": "Sweeper specific log level override, see hs.logger.setLogLevel for options.",
        "doc_gfm": "<p>Sweeper specific log level override, see hs.logger.setLogLevel for options.</p>\n",
        "file": "Source/Sweeper.spoon/init.lua",
        "lineno": "49",
        "name": "logLevel",
        "signature": "Sweeper.logLevel",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Sweeper.subscribedFunctions",
        "def_gfm": "Sweeper.subscribedFunctions",
        "desc": "Table containing all subscribed instance callbacks for the window filter, used",
        "desc_gfm": "<p>Table containing all subscribed instance callbacks for the window filter, used</p>\n",
        "doc": "Table containing all subscribed instance callbacks for the window filter, used\nduring shutdown.",
        "doc_gfm": "<p>Table containing all subscribed instance callbacks for the window filter, used\nduring shutdown.</p>\n",
        "file": "Source/Sweeper.spoon/init.lua",
        "lineno": "61",
        "name": "subscribedFunctions",
        "signature": "Sweeper.subscribedFunctions",
        "stripped_doc": "during shutdown.",
        "type": "Variable"
      },
      {
        "def": "Sweeper.sweepCheckInterval",
        "def_gfm": "Sweeper.sweepCheckInterval",
        "desc": "Time in seconds to wait after a window loses focus to check if it should be swept.",
        "desc_gfm": "<p>Time in seconds to wait after a window loses focus to check if it should be swept.</p>\n",
        "doc": "Time in seconds to wait after a window loses focus to check if it should be swept.",
        "doc_gfm": "<p>Time in seconds to wait after a window loses focus to check if it should be swept.</p>\n",
        "file": "Source/Sweeper.spoon/init.lua",
        "lineno": "38",
        "name": "sweepCheckInterval",
        "signature": "Sweeper.sweepCheckInterval",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Sweeper.windowFilter",
        "def_gfm": "Sweeper.windowFilter",
        "desc": "Main hs.window.filter. This is what is used to detect and action on unfocused",
        "desc_gfm": "<p>Main hs.window.filter. This is what is used to detect and action on unfocused</p>\n",
        "doc": "Main hs.window.filter. This is what is used to detect and action on unfocused\nwindows. It is a copy of the \"default\" window filter with Sweeper specific\nsort order and callback configurations applied in the start method.",
        "doc_gfm": "<p>Main hs.window.filter. This is what is used to detect and action on unfocused\nwindows. It is a copy of the &quot;default&quot; window filter with Sweeper specific\nsort order and callback configurations applied in the start method.</p>\n",
        "file": "Source/Sweeper.spoon/init.lua",
        "lineno": "54",
        "name": "windowFilter",
        "signature": "Sweeper.windowFilter",
        "stripped_doc": "windows. It is a copy of the \"default\" window filter with Sweeper specific\nsort order and callback configurations applied in the start method.",
        "type": "Variable"
      }
    ],
    "desc": "Automatically hide apps that are out of focus.",
    "desc_gfm": "<p>Automatically hide apps that are out of focus.</p>\n",
    "doc": "Automatically hide apps that are out of focus.\n\nDownload: https://github.com/adammillerio/Spoons/raw/main/Spoons/Sweeper.spoon.zip\n\nThis uses a hs.window.filter to detect windows that have gone out of focus. Then,\nif they are configured to be \"swept\" in the apps config, they will be automatically\nhidden if they remain out of focus after sweepCheckInterval (default 15 seconds).\n\nExample Usage (Using [SpoonInstall](https://zzamboni.org/post/using-spoons-in-hammerspoon/)):\nspoon.SpoonInstall:andUse(\n  \"Sweeper\",\n  {\n    start = true\n  }\n)",
    "doc_gfm": "<p>Automatically hide apps that are out of focus.</p>\n<p>Download: https://github.com/adammillerio/Spoons/raw/main/Spoons/Sweeper.spoon.zip</p>\n<p>This uses a hs.window.filter to detect windows that have gone out of focus. Then,\nif they are configured to be &quot;swept&quot; in the apps config, they will be automatically\nhidden if they remain out of focus after sweepCheckInterval (default 15 seconds).</p>\n<p>Example Usage (Using <a href=\"https://zzamboni.org/post/using-spoons-in-hammerspoon/\">SpoonInstall</a>):\nspoon.SpoonInstall:andUse(\n  &quot;Sweeper&quot;,\n  {\n    start = true\n  }\n)</p>\n",
    "items": [
      {
        "def": "Sweeper.apps",
        "def_gfm": "Sweeper.apps",
        "desc": "Table containing each application's name and it's desired configuration. The",
        "desc_gfm": "<p>Table containing each application's name and it's desired configuration. The</p>\n",
        "doc": "Table containing each application's name and it's desired configuration. The\nkey of each entry is the name of the application, and the value is a\nconfiguration table with the following entries:\n * sweep - If true, this application will be swept.\n * sweepCheckInterval - Override time in seconds for global `Sweeper.sweepCheckInterval`.",
        "doc_gfm": "<p>Table containing each application's name and it's desired configuration. The\nkey of each entry is the name of the application, and the value is a\nconfiguration table with the following entries:</p>\n<ul>\n<li>sweep - If true, this application will be swept.</li>\n<li>sweepCheckInterval - Override time in seconds for global <code>Sweeper.sweepCheckInterval</code>.</li>\n</ul>\n",
        "file": "Source/Sweeper.spoon/init.lua",
        "lineno": "29",
        "name": "apps",
        "signature": "Sweeper.apps",
        "stripped_doc": "key of each entry is the name of the application, and the value is a\nconfiguration table with the following entries:\n * sweep - If true, this application will be swept.\n * sweepCheckInterval - Override time in seconds for global `Sweeper.sweepCheckInterval`.",
        "type": "Variable"
      },
      {
        "def": "Sweeper:init()",
        "def_gfm": "Sweeper:init()",
        "desc": "Spoon initializer method for Sweeper.",
        "desc_gfm": "<p>Spoon initializer method for Sweeper.</p>\n",
        "doc": "Spoon initializer method for Sweeper.\n\nParameters:\n * None\n\nReturns:\n * None",
        "doc_gfm": "<p>Spoon initializer method for Sweeper.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "Source/Sweeper.spoon/init.lua",
        "lineno": "67",
        "name": "init",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "Sweeper:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Sweeper.logger",
        "def_gfm": "Sweeper.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log",
        "desc_gfm": "<p>Logger object used within the Spoon. Can be accessed to set the default log</p>\n",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log\nlevel for the messages coming from the Spoon.",
        "doc_gfm": "<p>Logger object used within the Spoon. Can be accessed to set the default log\nlevel for the messages coming from the Spoon.</p>\n",
        "file": "Source/Sweeper.spoon/init.lua",
        "lineno": "43",
        "name": "logger",
        "signature": "Sweeper.logger",
        "stripped_doc": "level for the messages coming from the Spoon.",
        "type": "Variable"
      },
      {
        "def": "Sweeper.logLevel",
        "def_gfm": "Sweeper.logLevel",
        "desc": "Sweeper specific log level override, see hs.logger.setLogLevel for options.",
        "desc_gfm": "<p>Sweeper specific log level override, see hs.logger.setLogLevel for options.</p>\n",
        "doc": "Sweeper specific log level override, see hs.logger.setLogLevel for options.",
        "doc_gfm": "<p>Sweeper specific log level override, see hs.logger.setLogLevel for options.</p>\n",
        "file": "Source/Sweeper.spoon/init.lua",
        "lineno": "49",
        "name": "logLevel",
        "signature": "Sweeper.logLevel",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Sweeper:start()",
        "def_gfm": "Sweeper:start()",
        "desc": "Spoon start method for Sweeper.",
        "desc_gfm": "<p>Spoon start method for Sweeper.</p>\n",
        "doc": "Spoon start method for Sweeper.\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * Configures the window filter, and subscribes to all window unfocus events.",
        "doc_gfm": "<p>Spoon start method for Sweeper.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>Configures the window filter, and subscribes to all window unfocus events.</li>\n</ul>\n",
        "examples": [],
        "file": "Source/Sweeper.spoon/init.lua",
        "lineno": "146",
        "name": "start",
        "notes": [
          " * Configures the window filter, and subscribes to all window unfocus events."
        ],
        "notes_gfm": "<ul>\n<li>Configures the window filter, and subscribes to all window unfocus events.</li>\n</ul>\n",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "Sweeper:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Sweeper:stop()",
        "def_gfm": "Sweeper:stop()",
        "desc": "Spoon stop method for Sweeper.",
        "desc_gfm": "<p>Spoon stop method for Sweeper.</p>\n",
        "doc": "Spoon stop method for Sweeper.\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * Unsubscribes the window filter from all subscribed functions.",
        "doc_gfm": "<p>Spoon stop method for Sweeper.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>Unsubscribes the window filter from all subscribed functions.</li>\n</ul>\n",
        "examples": [],
        "file": "Source/Sweeper.spoon/init.lua",
        "lineno": "179",
        "name": "stop",
        "notes": [
          " * Unsubscribes the window filter from all subscribed functions."
        ],
        "notes_gfm": "<ul>\n<li>Unsubscribes the window filter from all subscribed functions.</li>\n</ul>\n",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "Sweeper:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Sweeper.subscribedFunctions",
        "def_gfm": "Sweeper.subscribedFunctions",
        "desc": "Table containing all subscribed instance callbacks for the window filter, used",
        "desc_gfm": "<p>Table containing all subscribed instance callbacks for the window filter, used</p>\n",
        "doc": "Table containing all subscribed instance callbacks for the window filter, used\nduring shutdown.",
        "doc_gfm": "<p>Table containing all subscribed instance callbacks for the window filter, used\nduring shutdown.</p>\n",
        "file": "Source/Sweeper.spoon/init.lua",
        "lineno": "61",
        "name": "subscribedFunctions",
        "signature": "Sweeper.subscribedFunctions",
        "stripped_doc": "during shutdown.",
        "type": "Variable"
      },
      {
        "def": "Sweeper.sweepCheckInterval",
        "def_gfm": "Sweeper.sweepCheckInterval",
        "desc": "Time in seconds to wait after a window loses focus to check if it should be swept.",
        "desc_gfm": "<p>Time in seconds to wait after a window loses focus to check if it should be swept.</p>\n",
        "doc": "Time in seconds to wait after a window loses focus to check if it should be swept.",
        "doc_gfm": "<p>Time in seconds to wait after a window loses focus to check if it should be swept.</p>\n",
        "file": "Source/Sweeper.spoon/init.lua",
        "lineno": "38",
        "name": "sweepCheckInterval",
        "signature": "Sweeper.sweepCheckInterval",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Sweeper.windowFilter",
        "def_gfm": "Sweeper.windowFilter",
        "desc": "Main hs.window.filter. This is what is used to detect and action on unfocused",
        "desc_gfm": "<p>Main hs.window.filter. This is what is used to detect and action on unfocused</p>\n",
        "doc": "Main hs.window.filter. This is what is used to detect and action on unfocused\nwindows. It is a copy of the \"default\" window filter with Sweeper specific\nsort order and callback configurations applied in the start method.",
        "doc_gfm": "<p>Main hs.window.filter. This is what is used to detect and action on unfocused\nwindows. It is a copy of the &quot;default&quot; window filter with Sweeper specific\nsort order and callback configurations applied in the start method.</p>\n",
        "file": "Source/Sweeper.spoon/init.lua",
        "lineno": "54",
        "name": "windowFilter",
        "signature": "Sweeper.windowFilter",
        "stripped_doc": "windows. It is a copy of the \"default\" window filter with Sweeper specific\nsort order and callback configurations applied in the start method.",
        "type": "Variable"
      }
    ],
    "name": "Sweeper",
    "stripped_doc": "\nDownload: https://github.com/adammillerio/Spoons/raw/main/Spoons/Sweeper.spoon.zip\n\nThis uses a hs.window.filter to detect windows that have gone out of focus. Then,\nif they are configured to be \"swept\" in the apps config, they will be automatically\nhidden if they remain out of focus after sweepCheckInterval (default 15 seconds).\n\nExample Usage (Using [SpoonInstall](https://zzamboni.org/post/using-spoons-in-hammerspoon/)):\nspoon.SpoonInstall:andUse(\n  \"Sweeper\",\n  {\n    start = true\n  }\n)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "WindowCache:findWindowByApp(appName[, spaceID])",
        "def_gfm": "WindowCache:findWindowByApp(appName[, spaceID])",
        "desc": "Find the last opened window by application name.",
        "desc_gfm": "<p>Find the last opened window by application name.</p>\n",
        "doc": "Find the last opened window by application name.\n\nParameters:\n * appName - name of the application to find\n * spaceID - optional ID of Space to access Space-specific cache for\n\nReturns:\n * The `hs.window` object if found, `nil` otherwise",
        "doc_gfm": "<p>Find the last opened window by application name.</p>\n<p>Parameters:</p>\n<ul>\n<li>appName - name of the application to find</li>\n<li>spaceID - optional ID of Space to access Space-specific cache for</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>The <code>hs.window</code> object if found, <code>nil</code> otherwise</li>\n</ul>\n",
        "examples": [],
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "141",
        "name": "findWindowByApp",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * appName - name of the application to find",
          " * spaceID - optional ID of Space to access Space-specific cache for"
        ],
        "parameters_gfm": "<ul>\n<li>appName - name of the application to find</li>\n<li>spaceID - optional ID of Space to access Space-specific cache for</li>\n</ul>\n",
        "returns": [
          " * The `hs.window` object if found, `nil` otherwise"
        ],
        "returns_gfm": "<ul>\n<li>The <code>hs.window</code> object if found, <code>nil</code> otherwise</li>\n</ul>\n",
        "signature": "WindowCache:findWindowByApp(appName[, spaceID])",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowCache:findWindowByTitle(title[, spaceID])",
        "def_gfm": "WindowCache:findWindowByTitle(title[, spaceID])",
        "desc": "Find a window by title.",
        "desc_gfm": "<p>Find a window by title.</p>\n",
        "doc": "Find a window by title.\n\nParameters:\n * title - title of the window to find\n * spaceID - optional ID of Space to access Space-specific cache for\n\nReturns:\n * The `hs.window` object if found, `nil` otherwise",
        "doc_gfm": "<p>Find a window by title.</p>\n<p>Parameters:</p>\n<ul>\n<li>title - title of the window to find</li>\n<li>spaceID - optional ID of Space to access Space-specific cache for</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>The <code>hs.window</code> object if found, <code>nil</code> otherwise</li>\n</ul>\n",
        "examples": [],
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "91",
        "name": "findWindowByTitle",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * title - title of the window to find",
          " * spaceID - optional ID of Space to access Space-specific cache for"
        ],
        "parameters_gfm": "<ul>\n<li>title - title of the window to find</li>\n<li>spaceID - optional ID of Space to access Space-specific cache for</li>\n</ul>\n",
        "returns": [
          " * The `hs.window` object if found, `nil` otherwise"
        ],
        "returns_gfm": "<ul>\n<li>The <code>hs.window</code> object if found, <code>nil</code> otherwise</li>\n</ul>\n",
        "signature": "WindowCache:findWindowByTitle(title[, spaceID])",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowCache:focusWindowByApp(appName[, spaceID])",
        "def_gfm": "WindowCache:focusWindowByApp(appName[, spaceID])",
        "desc": "Find the last opened window by application name and focus it.",
        "desc_gfm": "<p>Find the last opened window by application name and focus it.</p>\n",
        "doc": "Find the last opened window by application name and focus it.\n\nParameters:\n * appName - name of the application to find\n * spaceID - optional ID of Space to access Space-specific cache for\n\nReturns:\n * The `hs.window` object focused if found, `nil` otherwise",
        "doc_gfm": "<p>Find the last opened window by application name and focus it.</p>\n<p>Parameters:</p>\n<ul>\n<li>appName - name of the application to find</li>\n<li>spaceID - optional ID of Space to access Space-specific cache for</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>The <code>hs.window</code> object focused if found, <code>nil</code> otherwise</li>\n</ul>\n",
        "examples": [],
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "192",
        "name": "focusWindowByApp",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * appName - name of the application to find",
          " * spaceID - optional ID of Space to access Space-specific cache for"
        ],
        "parameters_gfm": "<ul>\n<li>appName - name of the application to find</li>\n<li>spaceID - optional ID of Space to access Space-specific cache for</li>\n</ul>\n",
        "returns": [
          " * The `hs.window` object focused if found, `nil` otherwise"
        ],
        "returns_gfm": "<ul>\n<li>The <code>hs.window</code> object focused if found, <code>nil</code> otherwise</li>\n</ul>\n",
        "signature": "WindowCache:focusWindowByApp(appName[, spaceID])",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowCache:focusWindowByTitle(title[, spaceID])",
        "def_gfm": "WindowCache:focusWindowByTitle(title[, spaceID])",
        "desc": "Find a window by title and focus it.",
        "desc_gfm": "<p>Find a window by title and focus it.</p>\n",
        "doc": "Find a window by title and focus it.\n\nParameters:\n * title - title of the window to focus\n * spaceID - optional ID of Space to access Space-specific cache for\n\nReturns:\n * The `hs.window` object focused if found, `nil` otherwise",
        "doc_gfm": "<p>Find a window by title and focus it.</p>\n<p>Parameters:</p>\n<ul>\n<li>title - title of the window to focus</li>\n<li>spaceID - optional ID of Space to access Space-specific cache for</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>The <code>hs.window</code> object focused if found, <code>nil</code> otherwise</li>\n</ul>\n",
        "examples": [],
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "123",
        "name": "focusWindowByTitle",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * title - title of the window to focus",
          " * spaceID - optional ID of Space to access Space-specific cache for"
        ],
        "parameters_gfm": "<ul>\n<li>title - title of the window to focus</li>\n<li>spaceID - optional ID of Space to access Space-specific cache for</li>\n</ul>\n",
        "returns": [
          " * The `hs.window` object focused if found, `nil` otherwise"
        ],
        "returns_gfm": "<ul>\n<li>The <code>hs.window</code> object focused if found, <code>nil</code> otherwise</li>\n</ul>\n",
        "signature": "WindowCache:focusWindowByTitle(title[, spaceID])",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowCache:init()",
        "def_gfm": "WindowCache:init()",
        "desc": "Spoon initializer method for WindowCache.",
        "desc_gfm": "<p>Spoon initializer method for WindowCache.</p>\n",
        "doc": "Spoon initializer method for WindowCache.\n\nParameters:\n * None\n\nReturns:\n * None",
        "doc_gfm": "<p>Spoon initializer method for WindowCache.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "69",
        "name": "init",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "WindowCache:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowCache:start()",
        "def_gfm": "WindowCache:start()",
        "desc": "Spoon start method for WindowCache.",
        "desc_gfm": "<p>Spoon start method for WindowCache.</p>\n",
        "doc": "Spoon start method for WindowCache.\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * Configures the window filter, initializes the cache with all existing\n   windows, and then subscribes to all window related events to be cached.",
        "doc_gfm": "<p>Spoon start method for WindowCache.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>Configures the window filter, initializes the cache with all existing\nwindows, and then subscribes to all window related events to be cached.</li>\n</ul>\n",
        "examples": [],
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "304",
        "name": "start",
        "notes": [
          " * Configures the window filter, initializes the cache with all existing",
          "   windows, and then subscribes to all window related events to be cached."
        ],
        "notes_gfm": "<ul>\n<li>Configures the window filter, initializes the cache with all existing\nwindows, and then subscribes to all window related events to be cached.</li>\n</ul>\n",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "WindowCache:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowCache:stop()",
        "def_gfm": "WindowCache:stop()",
        "desc": "Spoon stop method for WindowCache.",
        "desc_gfm": "<p>Spoon stop method for WindowCache.</p>\n",
        "doc": "Spoon stop method for WindowCache.\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * Unsubscribes the window filter from all subscribed functions.",
        "doc_gfm": "<p>Spoon stop method for WindowCache.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>Unsubscribes the window filter from all subscribed functions.</li>\n</ul>\n",
        "examples": [],
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "343",
        "name": "stop",
        "notes": [
          " * Unsubscribes the window filter from all subscribed functions."
        ],
        "notes_gfm": "<ul>\n<li>Unsubscribes the window filter from all subscribed functions.</li>\n</ul>\n",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "WindowCache:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowCache:waitForWindowByApp(appName, fn[, interval, spaceID])",
        "def_gfm": "WindowCache:waitForWindowByApp(appName, fn[, interval, spaceID])",
        "desc": "Wait for cached window in appName every interval and run fn when found.",
        "desc_gfm": "<p>Wait for cached window in appName every interval and run fn when found.</p>\n",
        "doc": "Wait for cached window in appName every interval and run fn when found.\n\nParameters:\n * appName - name of the application to wait for first cached window of\n * fn - function to run when first cached window is found. This function may\n   take a single argument, the timer itself\n * interval - How often to check for cached window, defaults to 1 second.\n * spaceID - optional ID of Space to access Space-specific cache for\n\nReturns:\n * The started `hs.timer` instance.",
        "doc_gfm": "<p>Wait for cached window in appName every interval and run fn when found.</p>\n<p>Parameters:</p>\n<ul>\n<li>appName - name of the application to wait for first cached window of</li>\n<li>fn - function to run when first cached window is found. This function may\ntake a single argument, the timer itself</li>\n<li>interval - How often to check for cached window, defaults to 1 second.</li>\n<li>spaceID - optional ID of Space to access Space-specific cache for</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>The started <code>hs.timer</code> instance.</li>\n</ul>\n",
        "examples": [],
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "173",
        "name": "waitForWindowByApp",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * appName - name of the application to wait for first cached window of",
          " * fn - function to run when first cached window is found. This function may take a single argument, the timer itself",
          " * interval - How often to check for cached window, defaults to 1 second.",
          " * spaceID - optional ID of Space to access Space-specific cache for"
        ],
        "parameters_gfm": "<ul>\n<li>appName - name of the application to wait for first cached window of</li>\n<li>fn - function to run when first cached window is found. This function may take a single argument, the timer itself</li>\n<li>interval - How often to check for cached window, defaults to 1 second.</li>\n<li>spaceID - optional ID of Space to access Space-specific cache for</li>\n</ul>\n",
        "returns": [
          " * The started `hs.timer` instance."
        ],
        "returns_gfm": "<ul>\n<li>The started <code>hs.timer</code> instance.</li>\n</ul>\n",
        "signature": "WindowCache:waitForWindowByApp(appName, fn[, interval, spaceID])",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "WindowCache.currentWindows",
        "def_gfm": "WindowCache.currentWindows",
        "desc": "Table containing the window cache, ordered by the time it was added to the",
        "desc_gfm": "<p>Table containing the window cache, ordered by the time it was added to the</p>\n",
        "doc": "Table containing the window cache, ordered by the time it was added to the\ncache.",
        "doc_gfm": "<p>Table containing the window cache, ordered by the time it was added to the\ncache.</p>\n",
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "51",
        "name": "currentWindows",
        "signature": "WindowCache.currentWindows",
        "stripped_doc": "cache.",
        "type": "Variable"
      },
      {
        "def": "WindowCache.logger",
        "def_gfm": "WindowCache.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log",
        "desc_gfm": "<p>Logger object used within the Spoon. Can be accessed to set the default log</p>\n",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log\nlevel for the messages coming from the Spoon.",
        "doc_gfm": "<p>Logger object used within the Spoon. Can be accessed to set the default log\nlevel for the messages coming from the Spoon.</p>\n",
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "33",
        "name": "logger",
        "signature": "WindowCache.logger",
        "stripped_doc": "level for the messages coming from the Spoon.",
        "type": "Variable"
      },
      {
        "def": "WindowCache.logLevel",
        "def_gfm": "WindowCache.logLevel",
        "desc": "WindowCache specific log level override, see hs.logger.setLogLevel for options.",
        "desc_gfm": "<p>WindowCache specific log level override, see hs.logger.setLogLevel for options.</p>\n",
        "doc": "WindowCache specific log level override, see hs.logger.setLogLevel for options.",
        "doc_gfm": "<p>WindowCache specific log level override, see hs.logger.setLogLevel for options.</p>\n",
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "39",
        "name": "logLevel",
        "signature": "WindowCache.logLevel",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "WindowCache.subscribedFunctions",
        "def_gfm": "WindowCache.subscribedFunctions",
        "desc": "Table containing all subscribed instance callbacks for the window filter, used",
        "desc_gfm": "<p>Table containing all subscribed instance callbacks for the window filter, used</p>\n",
        "doc": "Table containing all subscribed instance callbacks for the window filter, used\nduring shutdown.",
        "doc_gfm": "<p>Table containing all subscribed instance callbacks for the window filter, used\nduring shutdown.</p>\n",
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "57",
        "name": "subscribedFunctions",
        "signature": "WindowCache.subscribedFunctions",
        "stripped_doc": "during shutdown.",
        "type": "Variable"
      },
      {
        "def": "WindowCache.windowFilter",
        "def_gfm": "WindowCache.windowFilter",
        "desc": "Main hs.window.filter. This is what is used to enumerate and maintain the window",
        "desc_gfm": "<p>Main hs.window.filter. This is what is used to enumerate and maintain the window</p>\n",
        "doc": "Main hs.window.filter. This is what is used to enumerate and maintain the window\ncache. It is a copy of the \"default\" window filter with WindowCache specific\nsort order and callback configurations applied in the start method.",
        "doc_gfm": "<p>Main hs.window.filter. This is what is used to enumerate and maintain the window\ncache. It is a copy of the &quot;default&quot; window filter with WindowCache specific\nsort order and callback configurations applied in the start method.</p>\n",
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "44",
        "name": "windowFilter",
        "signature": "WindowCache.windowFilter",
        "stripped_doc": "cache. It is a copy of the \"default\" window filter with WindowCache specific\nsort order and callback configurations applied in the start method.",
        "type": "Variable"
      },
      {
        "def": "WindowCache.windowsBySpace",
        "def_gfm": "WindowCache.windowsBySpace",
        "desc": "Table containing per-Space window caches, keyed off of Mission Control Space ID,",
        "desc_gfm": "<p>Table containing per-Space window caches, keyed off of Mission Control Space ID,</p>\n",
        "doc": "Table containing per-Space window caches, keyed off of Mission Control Space ID,\nwhich can be used for retrieving Space-specific instances of apps and windows.",
        "doc_gfm": "<p>Table containing per-Space window caches, keyed off of Mission Control Space ID,\nwhich can be used for retrieving Space-specific instances of apps and windows.</p>\n",
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "63",
        "name": "windowsBySpace",
        "signature": "WindowCache.windowsBySpace",
        "stripped_doc": "which can be used for retrieving Space-specific instances of apps and windows.",
        "type": "Variable"
      }
    ],
    "desc": "Utility for quickly retrieving windows",
    "desc_gfm": "<p>Utility for quickly retrieving windows</p>\n",
    "doc": "Utility for quickly retrieving windows\n\nDownload: https://github.com/adammillerio/Spoons/raw/main/Spoons/WindowCache.spoon.zip\n\nThis uses a hs.window.filter to maintain a Least Recently Used cache which\ncan be searched either by window title or application name. This is useful\nfor automations which benefit from quick access to windows.\n\nThis was implemented based entirely off of the source of\n[hs_select_window.spoon](https://github.com/dmgerman/hs_select_window.spoon)\nand split out to be used across other Spoons.\n\nExample Usage (Using [SpoonInstall](https://zzamboni.org/post/using-spoons-in-hammerspoon/)):\nspoon.SpoonInstall:andUse(\n  \"WindowCache\",\n  {\n    start = true\n  }\n)",
    "doc_gfm": "<p>Utility for quickly retrieving windows</p>\n<p>Download: https://github.com/adammillerio/Spoons/raw/main/Spoons/WindowCache.spoon.zip</p>\n<p>This uses a hs.window.filter to maintain a Least Recently Used cache which\ncan be searched either by window title or application name. This is useful\nfor automations which benefit from quick access to windows.</p>\n<p>This was implemented based entirely off of the source of\n<a href=\"https://github.com/dmgerman/hs_select_window.spoon\">hs_select_window.spoon</a>\nand split out to be used across other Spoons.</p>\n<p>Example Usage (Using <a href=\"https://zzamboni.org/post/using-spoons-in-hammerspoon/\">SpoonInstall</a>):\nspoon.SpoonInstall:andUse(\n  &quot;WindowCache&quot;,\n  {\n    start = true\n  }\n)</p>\n",
    "items": [
      {
        "def": "WindowCache.currentWindows",
        "def_gfm": "WindowCache.currentWindows",
        "desc": "Table containing the window cache, ordered by the time it was added to the",
        "desc_gfm": "<p>Table containing the window cache, ordered by the time it was added to the</p>\n",
        "doc": "Table containing the window cache, ordered by the time it was added to the\ncache.",
        "doc_gfm": "<p>Table containing the window cache, ordered by the time it was added to the\ncache.</p>\n",
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "51",
        "name": "currentWindows",
        "signature": "WindowCache.currentWindows",
        "stripped_doc": "cache.",
        "type": "Variable"
      },
      {
        "def": "WindowCache:findWindowByApp(appName[, spaceID])",
        "def_gfm": "WindowCache:findWindowByApp(appName[, spaceID])",
        "desc": "Find the last opened window by application name.",
        "desc_gfm": "<p>Find the last opened window by application name.</p>\n",
        "doc": "Find the last opened window by application name.\n\nParameters:\n * appName - name of the application to find\n * spaceID - optional ID of Space to access Space-specific cache for\n\nReturns:\n * The `hs.window` object if found, `nil` otherwise",
        "doc_gfm": "<p>Find the last opened window by application name.</p>\n<p>Parameters:</p>\n<ul>\n<li>appName - name of the application to find</li>\n<li>spaceID - optional ID of Space to access Space-specific cache for</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>The <code>hs.window</code> object if found, <code>nil</code> otherwise</li>\n</ul>\n",
        "examples": [],
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "141",
        "name": "findWindowByApp",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * appName - name of the application to find",
          " * spaceID - optional ID of Space to access Space-specific cache for"
        ],
        "parameters_gfm": "<ul>\n<li>appName - name of the application to find</li>\n<li>spaceID - optional ID of Space to access Space-specific cache for</li>\n</ul>\n",
        "returns": [
          " * The `hs.window` object if found, `nil` otherwise"
        ],
        "returns_gfm": "<ul>\n<li>The <code>hs.window</code> object if found, <code>nil</code> otherwise</li>\n</ul>\n",
        "signature": "WindowCache:findWindowByApp(appName[, spaceID])",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowCache:findWindowByTitle(title[, spaceID])",
        "def_gfm": "WindowCache:findWindowByTitle(title[, spaceID])",
        "desc": "Find a window by title.",
        "desc_gfm": "<p>Find a window by title.</p>\n",
        "doc": "Find a window by title.\n\nParameters:\n * title - title of the window to find\n * spaceID - optional ID of Space to access Space-specific cache for\n\nReturns:\n * The `hs.window` object if found, `nil` otherwise",
        "doc_gfm": "<p>Find a window by title.</p>\n<p>Parameters:</p>\n<ul>\n<li>title - title of the window to find</li>\n<li>spaceID - optional ID of Space to access Space-specific cache for</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>The <code>hs.window</code> object if found, <code>nil</code> otherwise</li>\n</ul>\n",
        "examples": [],
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "91",
        "name": "findWindowByTitle",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * title - title of the window to find",
          " * spaceID - optional ID of Space to access Space-specific cache for"
        ],
        "parameters_gfm": "<ul>\n<li>title - title of the window to find</li>\n<li>spaceID - optional ID of Space to access Space-specific cache for</li>\n</ul>\n",
        "returns": [
          " * The `hs.window` object if found, `nil` otherwise"
        ],
        "returns_gfm": "<ul>\n<li>The <code>hs.window</code> object if found, <code>nil</code> otherwise</li>\n</ul>\n",
        "signature": "WindowCache:findWindowByTitle(title[, spaceID])",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowCache:focusWindowByApp(appName[, spaceID])",
        "def_gfm": "WindowCache:focusWindowByApp(appName[, spaceID])",
        "desc": "Find the last opened window by application name and focus it.",
        "desc_gfm": "<p>Find the last opened window by application name and focus it.</p>\n",
        "doc": "Find the last opened window by application name and focus it.\n\nParameters:\n * appName - name of the application to find\n * spaceID - optional ID of Space to access Space-specific cache for\n\nReturns:\n * The `hs.window` object focused if found, `nil` otherwise",
        "doc_gfm": "<p>Find the last opened window by application name and focus it.</p>\n<p>Parameters:</p>\n<ul>\n<li>appName - name of the application to find</li>\n<li>spaceID - optional ID of Space to access Space-specific cache for</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>The <code>hs.window</code> object focused if found, <code>nil</code> otherwise</li>\n</ul>\n",
        "examples": [],
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "192",
        "name": "focusWindowByApp",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * appName - name of the application to find",
          " * spaceID - optional ID of Space to access Space-specific cache for"
        ],
        "parameters_gfm": "<ul>\n<li>appName - name of the application to find</li>\n<li>spaceID - optional ID of Space to access Space-specific cache for</li>\n</ul>\n",
        "returns": [
          " * The `hs.window` object focused if found, `nil` otherwise"
        ],
        "returns_gfm": "<ul>\n<li>The <code>hs.window</code> object focused if found, <code>nil</code> otherwise</li>\n</ul>\n",
        "signature": "WindowCache:focusWindowByApp(appName[, spaceID])",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowCache:focusWindowByTitle(title[, spaceID])",
        "def_gfm": "WindowCache:focusWindowByTitle(title[, spaceID])",
        "desc": "Find a window by title and focus it.",
        "desc_gfm": "<p>Find a window by title and focus it.</p>\n",
        "doc": "Find a window by title and focus it.\n\nParameters:\n * title - title of the window to focus\n * spaceID - optional ID of Space to access Space-specific cache for\n\nReturns:\n * The `hs.window` object focused if found, `nil` otherwise",
        "doc_gfm": "<p>Find a window by title and focus it.</p>\n<p>Parameters:</p>\n<ul>\n<li>title - title of the window to focus</li>\n<li>spaceID - optional ID of Space to access Space-specific cache for</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>The <code>hs.window</code> object focused if found, <code>nil</code> otherwise</li>\n</ul>\n",
        "examples": [],
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "123",
        "name": "focusWindowByTitle",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * title - title of the window to focus",
          " * spaceID - optional ID of Space to access Space-specific cache for"
        ],
        "parameters_gfm": "<ul>\n<li>title - title of the window to focus</li>\n<li>spaceID - optional ID of Space to access Space-specific cache for</li>\n</ul>\n",
        "returns": [
          " * The `hs.window` object focused if found, `nil` otherwise"
        ],
        "returns_gfm": "<ul>\n<li>The <code>hs.window</code> object focused if found, <code>nil</code> otherwise</li>\n</ul>\n",
        "signature": "WindowCache:focusWindowByTitle(title[, spaceID])",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowCache:init()",
        "def_gfm": "WindowCache:init()",
        "desc": "Spoon initializer method for WindowCache.",
        "desc_gfm": "<p>Spoon initializer method for WindowCache.</p>\n",
        "doc": "Spoon initializer method for WindowCache.\n\nParameters:\n * None\n\nReturns:\n * None",
        "doc_gfm": "<p>Spoon initializer method for WindowCache.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n",
        "examples": [],
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "69",
        "name": "init",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "WindowCache:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowCache.logger",
        "def_gfm": "WindowCache.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log",
        "desc_gfm": "<p>Logger object used within the Spoon. Can be accessed to set the default log</p>\n",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log\nlevel for the messages coming from the Spoon.",
        "doc_gfm": "<p>Logger object used within the Spoon. Can be accessed to set the default log\nlevel for the messages coming from the Spoon.</p>\n",
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "33",
        "name": "logger",
        "signature": "WindowCache.logger",
        "stripped_doc": "level for the messages coming from the Spoon.",
        "type": "Variable"
      },
      {
        "def": "WindowCache.logLevel",
        "def_gfm": "WindowCache.logLevel",
        "desc": "WindowCache specific log level override, see hs.logger.setLogLevel for options.",
        "desc_gfm": "<p>WindowCache specific log level override, see hs.logger.setLogLevel for options.</p>\n",
        "doc": "WindowCache specific log level override, see hs.logger.setLogLevel for options.",
        "doc_gfm": "<p>WindowCache specific log level override, see hs.logger.setLogLevel for options.</p>\n",
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "39",
        "name": "logLevel",
        "signature": "WindowCache.logLevel",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "WindowCache:start()",
        "def_gfm": "WindowCache:start()",
        "desc": "Spoon start method for WindowCache.",
        "desc_gfm": "<p>Spoon start method for WindowCache.</p>\n",
        "doc": "Spoon start method for WindowCache.\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * Configures the window filter, initializes the cache with all existing\n   windows, and then subscribes to all window related events to be cached.",
        "doc_gfm": "<p>Spoon start method for WindowCache.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>Configures the window filter, initializes the cache with all existing\nwindows, and then subscribes to all window related events to be cached.</li>\n</ul>\n",
        "examples": [],
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "304",
        "name": "start",
        "notes": [
          " * Configures the window filter, initializes the cache with all existing",
          "   windows, and then subscribes to all window related events to be cached."
        ],
        "notes_gfm": "<ul>\n<li>Configures the window filter, initializes the cache with all existing\nwindows, and then subscribes to all window related events to be cached.</li>\n</ul>\n",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "WindowCache:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowCache:stop()",
        "def_gfm": "WindowCache:stop()",
        "desc": "Spoon stop method for WindowCache.",
        "desc_gfm": "<p>Spoon stop method for WindowCache.</p>\n",
        "doc": "Spoon stop method for WindowCache.\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * Unsubscribes the window filter from all subscribed functions.",
        "doc_gfm": "<p>Spoon stop method for WindowCache.</p>\n<p>Parameters:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>None</li>\n</ul>\n<p>Notes:</p>\n<ul>\n<li>Unsubscribes the window filter from all subscribed functions.</li>\n</ul>\n",
        "examples": [],
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "343",
        "name": "stop",
        "notes": [
          " * Unsubscribes the window filter from all subscribed functions."
        ],
        "notes_gfm": "<ul>\n<li>Unsubscribes the window filter from all subscribed functions.</li>\n</ul>\n",
        "parameters": [
          " * None"
        ],
        "parameters_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "returns": [
          " * None"
        ],
        "returns_gfm": "<ul>\n<li>None</li>\n</ul>\n",
        "signature": "WindowCache:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowCache.subscribedFunctions",
        "def_gfm": "WindowCache.subscribedFunctions",
        "desc": "Table containing all subscribed instance callbacks for the window filter, used",
        "desc_gfm": "<p>Table containing all subscribed instance callbacks for the window filter, used</p>\n",
        "doc": "Table containing all subscribed instance callbacks for the window filter, used\nduring shutdown.",
        "doc_gfm": "<p>Table containing all subscribed instance callbacks for the window filter, used\nduring shutdown.</p>\n",
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "57",
        "name": "subscribedFunctions",
        "signature": "WindowCache.subscribedFunctions",
        "stripped_doc": "during shutdown.",
        "type": "Variable"
      },
      {
        "def": "WindowCache:waitForWindowByApp(appName, fn[, interval, spaceID])",
        "def_gfm": "WindowCache:waitForWindowByApp(appName, fn[, interval, spaceID])",
        "desc": "Wait for cached window in appName every interval and run fn when found.",
        "desc_gfm": "<p>Wait for cached window in appName every interval and run fn when found.</p>\n",
        "doc": "Wait for cached window in appName every interval and run fn when found.\n\nParameters:\n * appName - name of the application to wait for first cached window of\n * fn - function to run when first cached window is found. This function may\n   take a single argument, the timer itself\n * interval - How often to check for cached window, defaults to 1 second.\n * spaceID - optional ID of Space to access Space-specific cache for\n\nReturns:\n * The started `hs.timer` instance.",
        "doc_gfm": "<p>Wait for cached window in appName every interval and run fn when found.</p>\n<p>Parameters:</p>\n<ul>\n<li>appName - name of the application to wait for first cached window of</li>\n<li>fn - function to run when first cached window is found. This function may\ntake a single argument, the timer itself</li>\n<li>interval - How often to check for cached window, defaults to 1 second.</li>\n<li>spaceID - optional ID of Space to access Space-specific cache for</li>\n</ul>\n<p>Returns:</p>\n<ul>\n<li>The started <code>hs.timer</code> instance.</li>\n</ul>\n",
        "examples": [],
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "173",
        "name": "waitForWindowByApp",
        "notes": [],
        "notes_gfm": "",
        "parameters": [
          " * appName - name of the application to wait for first cached window of",
          " * fn - function to run when first cached window is found. This function may take a single argument, the timer itself",
          " * interval - How often to check for cached window, defaults to 1 second.",
          " * spaceID - optional ID of Space to access Space-specific cache for"
        ],
        "parameters_gfm": "<ul>\n<li>appName - name of the application to wait for first cached window of</li>\n<li>fn - function to run when first cached window is found. This function may take a single argument, the timer itself</li>\n<li>interval - How often to check for cached window, defaults to 1 second.</li>\n<li>spaceID - optional ID of Space to access Space-specific cache for</li>\n</ul>\n",
        "returns": [
          " * The started `hs.timer` instance."
        ],
        "returns_gfm": "<ul>\n<li>The started <code>hs.timer</code> instance.</li>\n</ul>\n",
        "signature": "WindowCache:waitForWindowByApp(appName, fn[, interval, spaceID])",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowCache.windowFilter",
        "def_gfm": "WindowCache.windowFilter",
        "desc": "Main hs.window.filter. This is what is used to enumerate and maintain the window",
        "desc_gfm": "<p>Main hs.window.filter. This is what is used to enumerate and maintain the window</p>\n",
        "doc": "Main hs.window.filter. This is what is used to enumerate and maintain the window\ncache. It is a copy of the \"default\" window filter with WindowCache specific\nsort order and callback configurations applied in the start method.",
        "doc_gfm": "<p>Main hs.window.filter. This is what is used to enumerate and maintain the window\ncache. It is a copy of the &quot;default&quot; window filter with WindowCache specific\nsort order and callback configurations applied in the start method.</p>\n",
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "44",
        "name": "windowFilter",
        "signature": "WindowCache.windowFilter",
        "stripped_doc": "cache. It is a copy of the \"default\" window filter with WindowCache specific\nsort order and callback configurations applied in the start method.",
        "type": "Variable"
      },
      {
        "def": "WindowCache.windowsBySpace",
        "def_gfm": "WindowCache.windowsBySpace",
        "desc": "Table containing per-Space window caches, keyed off of Mission Control Space ID,",
        "desc_gfm": "<p>Table containing per-Space window caches, keyed off of Mission Control Space ID,</p>\n",
        "doc": "Table containing per-Space window caches, keyed off of Mission Control Space ID,\nwhich can be used for retrieving Space-specific instances of apps and windows.",
        "doc_gfm": "<p>Table containing per-Space window caches, keyed off of Mission Control Space ID,\nwhich can be used for retrieving Space-specific instances of apps and windows.</p>\n",
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "63",
        "name": "windowsBySpace",
        "signature": "WindowCache.windowsBySpace",
        "stripped_doc": "which can be used for retrieving Space-specific instances of apps and windows.",
        "type": "Variable"
      }
    ],
    "name": "WindowCache",
    "stripped_doc": "\nDownload: https://github.com/adammillerio/Spoons/raw/main/Spoons/WindowCache.spoon.zip\n\nThis uses a hs.window.filter to maintain a Least Recently Used cache which\ncan be searched either by window title or application name. This is useful\nfor automations which benefit from quick access to windows.\n\nThis was implemented based entirely off of the source of\n[hs_select_window.spoon](https://github.com/dmgerman/hs_select_window.spoon)\nand split out to be used across other Spoons.\n\nExample Usage (Using [SpoonInstall](https://zzamboni.org/post/using-spoons-in-hammerspoon/)):\nspoon.SpoonInstall:andUse(\n  \"WindowCache\",\n  {\n    start = true\n  }\n)",
    "submodules": [],
    "type": "Module"
  }
]