[
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [

    ],
    "Variable" : [
      {
        "doc" : "Table containing each application's name and it's desired configuration. The\nkey of each entry is the name of the application, and the value is a\nconfiguration table with the following entries:\n * carry - If true, this application will be carried on Space change.",
        "stripped_doc" : [
          "Table containing each application's name and it's desired configuration. The",
          "key of each entry is the name of the application, and the value is a",
          "configuration table with the following entries:",
          " * carry - If true, this application will be carried on Space change."
        ],
        "name" : "apps",
        "desc" : "Table containing each application's name and it's desired configuration. The",
        "notes" : [

        ],
        "signature" : "Carrier.apps",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Carrier.apps",
        "parameters" : [

        ]
      },
      {
        "doc" : "Logger object used within the Spoon. Can be accessed to set the default log\nlevel for the messages coming from the Spoon.",
        "stripped_doc" : [
          "Logger object used within the Spoon. Can be accessed to set the default log",
          "level for the messages coming from the Spoon."
        ],
        "name" : "logger",
        "desc" : "Logger object used within the Spoon. Can be accessed to set the default log",
        "notes" : [

        ],
        "signature" : "Carrier.logger",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Carrier.logger",
        "parameters" : [

        ]
      },
      {
        "doc" : "Carrier specific log level override, see hs.logger.setLogLevel for options.",
        "stripped_doc" : [
          "Carrier specific log level override, see hs.logger.setLogLevel for options."
        ],
        "name" : "logLevel",
        "desc" : "Carrier specific log level override, see hs.logger.setLogLevel for options.",
        "notes" : [

        ],
        "signature" : "Carrier.logLevel",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Carrier.logLevel",
        "parameters" : [

        ]
      },
      {
        "doc" : "hs.spaces.watcher instance used for monitoring for space changes.",
        "stripped_doc" : [
          "hs.spaces.watcher instance used for monitoring for space changes."
        ],
        "name" : "spaceWatcher",
        "desc" : "hs.spaces.watcher instance used for monitoring for space changes.",
        "notes" : [

        ],
        "signature" : "Carrier.spaceWatcher",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Carrier.spaceWatcher",
        "parameters" : [

        ]
      },
      {
        "doc" : "Table containing the name of every app to carry on space change.",
        "stripped_doc" : [
          "Table containing the name of every app to carry on space change."
        ],
        "name" : "carryApps",
        "desc" : "Table containing the name of every app to carry on space change.",
        "notes" : [

        ],
        "signature" : "Carrier.carryApps",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Carrier.carryApps",
        "parameters" : [

        ]
      },
      {
        "doc" : "Time in seconds to wait before carrying windows after space change. Default 5 seconds.",
        "stripped_doc" : [
          "Time in seconds to wait before carrying windows after space change. Default 5 seconds."
        ],
        "name" : "carryDelay",
        "desc" : "Time in seconds to wait before carrying windows after space change. Default 5 seconds.",
        "notes" : [

        ],
        "signature" : "Carrier.carryDelay",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Carrier.carryDelay",
        "parameters" : [

        ]
      },
      {
        "doc" : "Any running hs.timer instance for a delayed carry, if enabled.",
        "stripped_doc" : [
          "Any running hs.timer instance for a delayed carry, if enabled."
        ],
        "name" : "carryDelayTimer",
        "desc" : "Any running hs.timer instance for a delayed carry, if enabled.",
        "notes" : [

        ],
        "signature" : "Carrier.carryDelayTimer",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Carrier.carryDelayTimer",
        "parameters" : [

        ]
      }
    ],
    "stripped_doc" : [

    ],
    "desc" : "Automatically hide apps that are out of focus.",
    "Deprecated" : [

    ],
    "type" : "Module",
    "Constructor" : [

    ],
    "doc" : "Automatically hide apps that are out of focus.\n\nDownload: https:\/\/github.com\/adammillerio\/Spoons\/raw\/main\/Spoons\/Carrier.spoon.zip\n\nThis uses a hs.window.filter to detect windows that have gone out of focus. Then,\nif they are configured to be \"swept\" in the apps config, they will be automatically\nhidden if they remain out of focus after sweepCheckInterval (default 15 seconds).\n\nREADME with example usage: [README.md](https:\/\/github.com\/adammillerio\/Carrier.spoon\/blob\/main\/README.md)",
    "Method" : [
      {
        "doc" : "Spoon initializer method for Carrier.\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "Spoon initializer method for Carrier.",
          ""
        ],
        "name" : "init",
        "desc" : "Spoon initializer method for Carrier.",
        "notes" : [

        ],
        "signature" : "Carrier:init()",
        "type" : "Method",
        "returns" : [
          " * None"
        ],
        "def" : "Carrier:init()",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Spoon start method for Carrier.\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * Configures the window filter, and subscribes to all window unfocus events.",
        "stripped_doc" : [
          "Spoon start method for Carrier.",
          ""
        ],
        "name" : "start",
        "desc" : "Spoon start method for Carrier.",
        "notes" : [
          " * Configures the window filter, and subscribes to all window unfocus events."
        ],
        "signature" : "Carrier:start()",
        "type" : "Method",
        "returns" : [
          " * None",
          ""
        ],
        "def" : "Carrier:start()",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Spoon stop method for Carrier.\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * Unsubscribes the window filter from all subscribed functions.",
        "stripped_doc" : [
          "Spoon stop method for Carrier.",
          ""
        ],
        "name" : "stop",
        "desc" : "Spoon stop method for Carrier.",
        "notes" : [
          " * Unsubscribes the window filter from all subscribed functions."
        ],
        "signature" : "Carrier:stop()",
        "type" : "Method",
        "returns" : [
          " * None",
          ""
        ],
        "def" : "Carrier:stop()",
        "parameters" : [
          " * None",
          ""
        ]
      }
    ],
    "Command" : [

    ],
    "Field" : [

    ],
    "items" : [
      {
        "doc" : "Table containing each application's name and it's desired configuration. The\nkey of each entry is the name of the application, and the value is a\nconfiguration table with the following entries:\n * carry - If true, this application will be carried on Space change.",
        "stripped_doc" : [
          "Table containing each application's name and it's desired configuration. The",
          "key of each entry is the name of the application, and the value is a",
          "configuration table with the following entries:",
          " * carry - If true, this application will be carried on Space change."
        ],
        "name" : "apps",
        "desc" : "Table containing each application's name and it's desired configuration. The",
        "notes" : [

        ],
        "signature" : "Carrier.apps",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Carrier.apps",
        "parameters" : [

        ]
      },
      {
        "doc" : "Table containing the name of every app to carry on space change.",
        "stripped_doc" : [
          "Table containing the name of every app to carry on space change."
        ],
        "name" : "carryApps",
        "desc" : "Table containing the name of every app to carry on space change.",
        "notes" : [

        ],
        "signature" : "Carrier.carryApps",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Carrier.carryApps",
        "parameters" : [

        ]
      },
      {
        "doc" : "Time in seconds to wait before carrying windows after space change. Default 5 seconds.",
        "stripped_doc" : [
          "Time in seconds to wait before carrying windows after space change. Default 5 seconds."
        ],
        "name" : "carryDelay",
        "desc" : "Time in seconds to wait before carrying windows after space change. Default 5 seconds.",
        "notes" : [

        ],
        "signature" : "Carrier.carryDelay",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Carrier.carryDelay",
        "parameters" : [

        ]
      },
      {
        "doc" : "Any running hs.timer instance for a delayed carry, if enabled.",
        "stripped_doc" : [
          "Any running hs.timer instance for a delayed carry, if enabled."
        ],
        "name" : "carryDelayTimer",
        "desc" : "Any running hs.timer instance for a delayed carry, if enabled.",
        "notes" : [

        ],
        "signature" : "Carrier.carryDelayTimer",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Carrier.carryDelayTimer",
        "parameters" : [

        ]
      },
      {
        "doc" : "Carrier specific log level override, see hs.logger.setLogLevel for options.",
        "stripped_doc" : [
          "Carrier specific log level override, see hs.logger.setLogLevel for options."
        ],
        "name" : "logLevel",
        "desc" : "Carrier specific log level override, see hs.logger.setLogLevel for options.",
        "notes" : [

        ],
        "signature" : "Carrier.logLevel",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Carrier.logLevel",
        "parameters" : [

        ]
      },
      {
        "doc" : "Logger object used within the Spoon. Can be accessed to set the default log\nlevel for the messages coming from the Spoon.",
        "stripped_doc" : [
          "Logger object used within the Spoon. Can be accessed to set the default log",
          "level for the messages coming from the Spoon."
        ],
        "name" : "logger",
        "desc" : "Logger object used within the Spoon. Can be accessed to set the default log",
        "notes" : [

        ],
        "signature" : "Carrier.logger",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Carrier.logger",
        "parameters" : [

        ]
      },
      {
        "doc" : "hs.spaces.watcher instance used for monitoring for space changes.",
        "stripped_doc" : [
          "hs.spaces.watcher instance used for monitoring for space changes."
        ],
        "name" : "spaceWatcher",
        "desc" : "hs.spaces.watcher instance used for monitoring for space changes.",
        "notes" : [

        ],
        "signature" : "Carrier.spaceWatcher",
        "type" : "Variable",
        "returns" : [

        ],
        "def" : "Carrier.spaceWatcher",
        "parameters" : [

        ]
      },
      {
        "doc" : "Spoon initializer method for Carrier.\n\nParameters:\n * None\n\nReturns:\n * None",
        "stripped_doc" : [
          "Spoon initializer method for Carrier.",
          ""
        ],
        "name" : "init",
        "desc" : "Spoon initializer method for Carrier.",
        "notes" : [

        ],
        "signature" : "Carrier:init()",
        "type" : "Method",
        "returns" : [
          " * None"
        ],
        "def" : "Carrier:init()",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Spoon start method for Carrier.\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * Configures the window filter, and subscribes to all window unfocus events.",
        "stripped_doc" : [
          "Spoon start method for Carrier.",
          ""
        ],
        "name" : "start",
        "desc" : "Spoon start method for Carrier.",
        "notes" : [
          " * Configures the window filter, and subscribes to all window unfocus events."
        ],
        "signature" : "Carrier:start()",
        "type" : "Method",
        "returns" : [
          " * None",
          ""
        ],
        "def" : "Carrier:start()",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Spoon stop method for Carrier.\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * Unsubscribes the window filter from all subscribed functions.",
        "stripped_doc" : [
          "Spoon stop method for Carrier.",
          ""
        ],
        "name" : "stop",
        "desc" : "Spoon stop method for Carrier.",
        "notes" : [
          " * Unsubscribes the window filter from all subscribed functions."
        ],
        "signature" : "Carrier:stop()",
        "type" : "Method",
        "returns" : [
          " * None",
          ""
        ],
        "def" : "Carrier:stop()",
        "parameters" : [
          " * None",
          ""
        ]
      }
    ],
    "name" : "Carrier"
  }
]
