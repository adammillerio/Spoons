[
  {
    "desc": "Automatically hide apps that are out of focus.",
    "name": "Carrier",
    "type": "Module"
  },
  {
    "desc": "Table containing each application's name and it's desired configuration. The",
    "module": "Carrier",
    "name": "apps",
    "type": "Variable"
  },
  {
    "desc": "Table containing the name of every app to carry on space change.",
    "module": "Carrier",
    "name": "carryApps",
    "type": "Variable"
  },
  {
    "desc": "Time in seconds to wait before carrying windows after space change. Default 5 seconds.",
    "module": "Carrier",
    "name": "carryDelay",
    "type": "Variable"
  },
  {
    "desc": "Any running hs.timer instance for a delayed carry, if enabled.",
    "module": "Carrier",
    "name": "carryDelayTimer",
    "type": "Variable"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log",
    "module": "Carrier",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Carrier specific log level override, see hs.logger.setLogLevel for options.",
    "module": "Carrier",
    "name": "logLevel",
    "type": "Variable"
  },
  {
    "desc": "hs.spaces.watcher instance used for monitoring for space changes.",
    "module": "Carrier",
    "name": "spaceWatcher",
    "type": "Variable"
  },
  {
    "desc": "Spoon initializer method for Carrier.",
    "module": "Carrier",
    "name": "init",
    "type": "Method"
  },
  {
    "desc": "Spoon start method for Carrier.",
    "module": "Carrier",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Spoon stop method for Carrier.",
    "module": "Carrier",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Utility for providing fast and guaranteed access to app windows during macros.",
    "name": "EnsureApp",
    "type": "Module"
  },
  {
    "desc": "Maximize the application on the current space if it is not maximized already.",
    "module": "EnsureApp",
    "name": "maximize",
    "type": "Constant"
  },
  {
    "desc": "Move the window to appear under the provided frame as if it were a menu. This",
    "module": "EnsureApp",
    "name": "move",
    "type": "Constant"
  },
  {
    "desc": "No-op, will do no action other than moving window to the space and focusing",
    "module": "EnsureApp",
    "name": "none",
    "type": "Constant"
  },
  {
    "desc": "Table with \"Set\" of all app names configured for EnsureApp.",
    "module": "EnsureApp",
    "name": "appNamesSet",
    "type": "Variable"
  },
  {
    "desc": "Table containing each application's name and it's desired configuration. The",
    "module": "EnsureApp",
    "name": "apps",
    "type": "Variable"
  },
  {
    "desc": "Table containing the default configuration to be used for any app that is not",
    "module": "EnsureApp",
    "name": "defaultAppConfig",
    "type": "Variable"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log ",
    "module": "EnsureApp",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "EnsureApp specific log level override, see hs.logger.setLogLevel for options.",
    "module": "EnsureApp",
    "name": "logLevel",
    "type": "Variable"
  },
  {
    "desc": "hs.timer for moving an app's first window after being opened via EnsureApp.",
    "module": "EnsureApp",
    "name": "windowOpenTimer",
    "type": "Variable"
  },
  {
    "desc": "Ensure the existence of a window from appName in the current Space.",
    "module": "EnsureApp",
    "name": "ensureApp",
    "type": "Method"
  },
  {
    "desc": "(Callback) Ensure the existence of a window from appName in the current Space.",
    "module": "EnsureApp",
    "name": "ensureAppCallback",
    "type": "Method"
  },
  {
    "desc": "Returns whether or not app name is configured for EnsureApp.",
    "module": "EnsureApp",
    "name": "getAppEnsured",
    "type": "Method"
  },
  {
    "desc": "Get a list of all app names currently configured in EnsureApps.",
    "module": "EnsureApp",
    "name": "getAppNames",
    "type": "Method"
  },
  {
    "desc": "Given a spaceID, return the name of all configured apps present in the space.",
    "module": "EnsureApp",
    "name": "getAppNamesForSpace",
    "type": "Method"
  },
  {
    "desc": "Spoon initializer method for EnsureApp.",
    "module": "EnsureApp",
    "name": "init",
    "type": "Method"
  },
  {
    "desc": "Spoon start method for EnsureApp.",
    "module": "EnsureApp",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Spoon stop method for EnsureApp.",
    "module": "EnsureApp",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Quickly ensure access to apps in the current Space via hotkeys.",
    "name": "HotkeyApps",
    "type": "Module"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log ",
    "module": "HotkeyApps",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "HotkeyApps specific log level override, see hs.logger.setLogLevel for options.",
    "module": "HotkeyApps",
    "name": "logLevel",
    "type": "Variable"
  },
  {
    "desc": "Bind method, binds all provided hotkeys to their app ensure callbacks.",
    "module": "HotkeyApps",
    "name": "bindHotkeys",
    "type": "Method"
  },
  {
    "desc": "Spoon initializer method for EnsureApp.",
    "module": "HotkeyApps",
    "name": "init",
    "type": "Method"
  },
  {
    "desc": "Lightweight, consistent, and fast Spotlight replacement.",
    "name": "Lightspot",
    "type": "Module"
  },
  {
    "desc": "hs.chooser object representing the chooser.",
    "module": "Lightspot",
    "name": "chooser",
    "type": "Variable"
  },
  {
    "desc": "Default hotkey to use for the chooser when \"hotkeys\" = \"default\".",
    "module": "Lightspot",
    "name": "defaultHotkeys",
    "type": "Variable"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log",
    "module": "Lightspot",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Lightspot specific log level override, see hs.logger.setLogLevel for options.",
    "module": "Lightspot",
    "name": "logLevel",
    "type": "Variable"
  },
  {
    "desc": "Spoon initializer method for Lightspot.",
    "module": "Lightspot",
    "name": "init",
    "type": "Method"
  },
  {
    "desc": "Spoon start method for Lightspot.",
    "module": "Lightspot",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Spoon stop method for Lightspot.",
    "module": "Lightspot",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Control applications from the macOS Menu Bar ",
    "name": "MenuBarApps",
    "type": "Module"
  },
  {
    "desc": "Table containing each application's name and it's desired configuration. The",
    "module": "MenuBarApps",
    "name": "apps",
    "type": "Variable"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log ",
    "module": "MenuBarApps",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "MenuBarApps specific log level override, see hs.logger.setLogLevel for options.",
    "module": "MenuBarApps",
    "name": "logLevel",
    "type": "Variable"
  },
  {
    "desc": "Table containing references to all of the created menu bars.",
    "module": "MenuBarApps",
    "name": "menuBars",
    "type": "Variable"
  },
  {
    "desc": "Spoon initializer method for MenuBarApps.",
    "module": "MenuBarApps",
    "name": "init",
    "type": "Method"
  },
  {
    "desc": "Spoon start method for MenuBarApps. Creates all configured menu bars.",
    "module": "MenuBarApps",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Spoon stop method for MenuBarApps. Deletes all configured menu bars.",
    "module": "MenuBarApps",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Use \"Type to Siri\" through Hammerspoon",
    "name": "SiriSays",
    "type": "Module"
  },
  {
    "desc": "Bundle ID of Apple Notification Center, used to detect when \"Type to Siri\"",
    "module": "SiriSays",
    "name": "notificationCenterBundleID",
    "type": "Constant"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log ",
    "module": "SiriSays",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Spacer specific log level override, see hs.logger.setLogLevel for options.",
    "module": "SiriSays",
    "name": "logLevel",
    "type": "Variable"
  },
  {
    "desc": "The previously focused window stored prior to starting the macro, used for",
    "module": "SiriSays",
    "name": "previouslyFocusedWindow",
    "type": "Variable"
  },
  {
    "desc": "int representing the time in seconds to wait before \"auto closing\"",
    "module": "SiriSays",
    "name": "typeToSiriCloseDelay",
    "type": "Variable"
  },
  {
    "desc": "hs.timer that waits typeToSiriCloseDelay seconds before auto closing the TTS",
    "module": "SiriSays",
    "name": "typeToSiriCloseTimer",
    "type": "Variable"
  },
  {
    "desc": "hs.timer that waits unto the TTS prompt is open.",
    "module": "SiriSays",
    "name": "typeToSiriOpenTimer",
    "type": "Variable"
  },
  {
    "desc": "Initiate a macro for sending text to Siri.",
    "module": "SiriSays",
    "name": "siri",
    "type": "Method"
  },
  {
    "desc": "Initiate a siri prompt from the Hammerspoon CLI.",
    "module": "SiriSays",
    "name": "siri_cli",
    "type": "Method"
  },
  {
    "desc": "Name and switch Mission Control spaces in the menu bar, with fullscreen support!",
    "name": "Spacer",
    "type": "Module"
  },
  {
    "desc": "Autosave name used with macOS to save menu bar item position.",
    "module": "Spacer",
    "name": "menuBarAutosaveName",
    "type": "Constant"
  },
  {
    "desc": "Key used for persisting space names between Hammerspoon launches via hs.settings.",
    "module": "Spacer",
    "name": "settingsKey",
    "type": "Constant"
  },
  {
    "desc": "Default hotkey to use for the space chooser and fullscreen ",
    "module": "Spacer",
    "name": "defaultHotkeys",
    "type": "Variable"
  },
  {
    "desc": "hs.timer used in fullscreenWindowToLeft to perform a delayed left click.",
    "module": "Spacer",
    "name": "delayedWindowClickTimer",
    "type": "Variable"
  },
  {
    "desc": "Keystroke representing shortcut to exit a full screen application. Defaults to",
    "module": "Spacer",
    "name": "exitFullScreenKeystroke",
    "type": "Variable"
  },
  {
    "desc": "int with the ID of the currently focused space.",
    "module": "Spacer",
    "name": "focusedSpace",
    "type": "Variable"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log ",
    "module": "Spacer",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Spacer specific log level override, see hs.logger.setLogLevel for options.",
    "module": "Spacer",
    "name": "logLevel",
    "type": "Variable"
  },
  {
    "desc": "hs.menubar representing the menu bar for Spacer.",
    "module": "Spacer",
    "name": "menuBar",
    "type": "Variable"
  },
  {
    "desc": "Table with an ordered list of the space names, which is used when loading",
    "module": "Spacer",
    "name": "orderedSpaceNames",
    "type": "Variable"
  },
  {
    "desc": "Table holding an ordered list of space IDs, which is then used to resolve",
    "module": "Spacer",
    "name": "orderedSpaces",
    "type": "Variable"
  },
  {
    "desc": "hs.chooser object representing the Space chooser.",
    "module": "Spacer",
    "name": "spaceChooser",
    "type": "Variable"
  },
  {
    "desc": "Table with key-value mapping of Space ID to it's user set name.",
    "module": "Spacer",
    "name": "spaceNames",
    "type": "Variable"
  },
  {
    "desc": "hs.spaces.watcher instance used for monitoring for space changes.",
    "module": "Spacer",
    "name": "spaceWatcher",
    "type": "Variable"
  },
  {
    "desc": "Menu item for tiling window to the left. Set this according to your language.",
    "module": "Spacer",
    "name": "tilingMenuItem",
    "type": "Variable"
  },
  {
    "desc": "Menu \"section\" which has tiling options. Set this according to your language.",
    "module": "Spacer",
    "name": "tilingMenuSection",
    "type": "Variable"
  },
  {
    "desc": "Exit fullscreen on window.",
    "module": "Spacer",
    "name": "exitFullscreen",
    "type": "Method"
  },
  {
    "desc": "Fullscreen app's focused window to the left of current space.",
    "module": "Spacer",
    "name": "fullscreenWindowToLeft",
    "type": "Method"
  },
  {
    "desc": "Spoon initializer method for Spacer.",
    "module": "Spacer",
    "name": "init",
    "type": "Method"
  },
  {
    "desc": "Spoon start method for Spacer. Creates/starts menu bar item and space watcher.",
    "module": "Spacer",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Spoon stop method for Spacer. Deletes menu bar item and stops space watcher.",
    "module": "Spacer",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Toggle the fullscreen state of current window to left of space.",
    "module": "Spacer",
    "name": "toggleFullscreenWindowToLeft",
    "type": "Method"
  },
  {
    "desc": "Automatically hide apps that are out of focus.",
    "name": "Sweeper",
    "type": "Module"
  },
  {
    "desc": "Table containing each application's name and it's desired configuration. The",
    "module": "Sweeper",
    "name": "apps",
    "type": "Variable"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log",
    "module": "Sweeper",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "Sweeper specific log level override, see hs.logger.setLogLevel for options.",
    "module": "Sweeper",
    "name": "logLevel",
    "type": "Variable"
  },
  {
    "desc": "Table containing all subscribed instance callbacks for the window filter, used",
    "module": "Sweeper",
    "name": "subscribedFunctions",
    "type": "Variable"
  },
  {
    "desc": "Time in seconds to wait after a window loses focus to check if it should be swept.",
    "module": "Sweeper",
    "name": "sweepCheckInterval",
    "type": "Variable"
  },
  {
    "desc": "Main hs.window.filter. This is what is used to detect and action on unfocused",
    "module": "Sweeper",
    "name": "windowFilter",
    "type": "Variable"
  },
  {
    "desc": "Spoon initializer method for Sweeper.",
    "module": "Sweeper",
    "name": "init",
    "type": "Method"
  },
  {
    "desc": "Spoon start method for Sweeper.",
    "module": "Sweeper",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Spoon stop method for Sweeper.",
    "module": "Sweeper",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Utility for quickly retrieving windows",
    "name": "WindowCache",
    "type": "Module"
  },
  {
    "desc": "Table containing the window cache, ordered by the time it was added to the",
    "module": "WindowCache",
    "name": "currentWindows",
    "type": "Variable"
  },
  {
    "desc": "Logger object used within the Spoon. Can be accessed to set the default log",
    "module": "WindowCache",
    "name": "logger",
    "type": "Variable"
  },
  {
    "desc": "WindowCache specific log level override, see hs.logger.setLogLevel for options.",
    "module": "WindowCache",
    "name": "logLevel",
    "type": "Variable"
  },
  {
    "desc": "Interval in seconds between checks for \"stale\" windows to be removed from",
    "module": "WindowCache",
    "name": "staleWindowCheckInterval",
    "type": "Variable"
  },
  {
    "desc": "hs.timer periodically running _checkForStaleWindows every staleWindowCheckInterval.",
    "module": "WindowCache",
    "name": "staleWindowCheckTimer",
    "type": "Variable"
  },
  {
    "desc": "Table containing all subscribed instance callbacks for the window filter, used",
    "module": "WindowCache",
    "name": "subscribedFunctions",
    "type": "Variable"
  },
  {
    "desc": "Main hs.window.filter. This is what is used to enumerate and maintain the window",
    "module": "WindowCache",
    "name": "windowFilter",
    "type": "Variable"
  },
  {
    "desc": "Table containing per-Space window caches, keyed off of Mission Control Space ID,",
    "module": "WindowCache",
    "name": "windowsBySpace",
    "type": "Variable"
  },
  {
    "desc": "Find the last opened window by application name.",
    "module": "WindowCache",
    "name": "findWindowByApp",
    "type": "Method"
  },
  {
    "desc": "Find a window by title.",
    "module": "WindowCache",
    "name": "findWindowByTitle",
    "type": "Method"
  },
  {
    "desc": "Find the last opened window by application name and focus it.",
    "module": "WindowCache",
    "name": "focusWindowByApp",
    "type": "Method"
  },
  {
    "desc": "Find a window by title and focus it.",
    "module": "WindowCache",
    "name": "focusWindowByTitle",
    "type": "Method"
  },
  {
    "desc": "Given a spaceID, get a list of all open app names in the space.",
    "module": "WindowCache",
    "name": "getAppNamesForSpace",
    "type": "Method"
  },
  {
    "desc": "Spoon initializer method for WindowCache.",
    "module": "WindowCache",
    "name": "init",
    "type": "Method"
  },
  {
    "desc": "Spoon start method for WindowCache.",
    "module": "WindowCache",
    "name": "start",
    "type": "Method"
  },
  {
    "desc": "Spoon stop method for WindowCache.",
    "module": "WindowCache",
    "name": "stop",
    "type": "Method"
  },
  {
    "desc": "Wait for cached window in appName every interval and run fn when found.",
    "module": "WindowCache",
    "name": "waitForWindowByApp",
    "type": "Method"
  }
]