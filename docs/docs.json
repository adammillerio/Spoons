[
  {
    "Command": [],
    "Constant": [
      {
        "def": "MenuBarApps.action.maximize",
        "desc": "Maximize the application on the current space if it is not maximized already.",
        "doc": "Maximize the application on the current space if it is not maximized already.",
        "file": "Source/MenuBarApps.spoon/init.lua",
        "lineno": "47",
        "name": "maximize",
        "signature": "MenuBarApps.action.maximize",
        "stripped_doc": "",
        "type": "Constant"
      },
      {
        "def": "MenuBarApps.action.move",
        "desc": "Move the window to appear under the menu bar item as if it were a menu.",
        "doc": "Move the window to appear under the menu bar item as if it were a menu.",
        "file": "Source/MenuBarApps.spoon/init.lua",
        "lineno": "43",
        "name": "move",
        "signature": "MenuBarApps.action.move",
        "stripped_doc": "",
        "type": "Constant"
      }
    ],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "MenuBarApps:init()",
        "desc": "Spoon initializer method for MenuBarApps.",
        "doc": "Spoon initializer method for MenuBarApps.\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/MenuBarApps.spoon/init.lua",
        "lineno": "80",
        "name": "init",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "MenuBarApps:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenuBarApps:start()",
        "desc": "Spoon start method for MenuBarApps. Creates all configured menu bars.",
        "doc": "Spoon start method for MenuBarApps. Creates all configured menu bars.\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/MenuBarApps.spoon/init.lua",
        "lineno": "156",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "MenuBarApps:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenuBarApps:stop()",
        "desc": "Spoon stop method for MenuBarApps. Deletes all configured menu bars.",
        "doc": "Spoon stop method for MenuBarApps. Deletes all configured menu bars.\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/MenuBarApps.spoon/init.lua",
        "lineno": "178",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "MenuBarApps:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "MenuBarApps.apps",
        "desc": "Table containing each application's name and it's desired configuration. The",
        "doc": "Table containing each application's name and it's desired configuration. The\nkey of each entry is the name of the App as it appears in the title bar, and\nthe value is a configuration table with the following entries:\n    * title - String with title text to display in the menu bar icon itself\n    * action - String with action to take on window when showing. See constants.",
        "file": "Source/MenuBarApps.spoon/init.lua",
        "lineno": "55",
        "name": "apps",
        "signature": "MenuBarApps.apps",
        "stripped_doc": "key of each entry is the name of the App as it appears in the title bar, and\nthe value is a configuration table with the following entries:\n    * title - String with title text to display in the menu bar icon itself\n    * action - String with action to take on window when showing. See constants.",
        "type": "Variable"
      },
      {
        "def": "MenuBarApps.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log ",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log \nlevel for the messages coming from the Spoon.",
        "file": "Source/MenuBarApps.spoon/init.lua",
        "lineno": "64",
        "name": "logger",
        "signature": "MenuBarApps.logger",
        "stripped_doc": "level for the messages coming from the Spoon.",
        "type": "Variable"
      },
      {
        "def": "MenuBarApps.logLevel",
        "desc": "MenuBarApps specific log level override, see hs.logger.setLogLevel for options.",
        "doc": "MenuBarApps specific log level override, see hs.logger.setLogLevel for options.",
        "file": "Source/MenuBarApps.spoon/init.lua",
        "lineno": "70",
        "name": "logLevel",
        "signature": "MenuBarApps.logLevel",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenuBarApps.menuBars",
        "desc": "Table containing references to all of the created menu bars.",
        "doc": "Table containing references to all of the created menu bars.",
        "file": "Source/MenuBarApps.spoon/init.lua",
        "lineno": "75",
        "name": "menuBars",
        "signature": "MenuBarApps.menuBars",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Control applications from the macOS Menu Bar ",
    "doc": "Control applications from the macOS Menu Bar \n\nDownload: https://github.com/adammillerio/Spoons/raw/main/Spoons/MenuBarApps.spoon.zip\n\nExample Usage (Using [SpoonInstall](https://zzamboni.org/post/using-spoons-in-hammerspoon/)):\nCreate a \"P\" menu bar item that opens and moves Plexamp and create a \"D\" menu\nbar item that opens and maximizes Discord.\nspoon.SpoonInstall:andUse(\n  \"MenuBarApps\",\n  {\n    config = {\n      apps = {\n        [\"Plexamp\"] = {\n          title = \"P\",\n          action = \"move\"\n        },\n        [\"Discord\"] = {\n          title = \"D\",\n          action = \"maximize\"\n        }\n      }\n    },\n    start = true\n  }\n)",
    "items": [
      {
        "def": "MenuBarApps.apps",
        "desc": "Table containing each application's name and it's desired configuration. The",
        "doc": "Table containing each application's name and it's desired configuration. The\nkey of each entry is the name of the App as it appears in the title bar, and\nthe value is a configuration table with the following entries:\n    * title - String with title text to display in the menu bar icon itself\n    * action - String with action to take on window when showing. See constants.",
        "file": "Source/MenuBarApps.spoon/init.lua",
        "lineno": "55",
        "name": "apps",
        "signature": "MenuBarApps.apps",
        "stripped_doc": "key of each entry is the name of the App as it appears in the title bar, and\nthe value is a configuration table with the following entries:\n    * title - String with title text to display in the menu bar icon itself\n    * action - String with action to take on window when showing. See constants.",
        "type": "Variable"
      },
      {
        "def": "MenuBarApps:init()",
        "desc": "Spoon initializer method for MenuBarApps.",
        "doc": "Spoon initializer method for MenuBarApps.\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/MenuBarApps.spoon/init.lua",
        "lineno": "80",
        "name": "init",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "MenuBarApps:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenuBarApps.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log ",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log \nlevel for the messages coming from the Spoon.",
        "file": "Source/MenuBarApps.spoon/init.lua",
        "lineno": "64",
        "name": "logger",
        "signature": "MenuBarApps.logger",
        "stripped_doc": "level for the messages coming from the Spoon.",
        "type": "Variable"
      },
      {
        "def": "MenuBarApps.logLevel",
        "desc": "MenuBarApps specific log level override, see hs.logger.setLogLevel for options.",
        "doc": "MenuBarApps specific log level override, see hs.logger.setLogLevel for options.",
        "file": "Source/MenuBarApps.spoon/init.lua",
        "lineno": "70",
        "name": "logLevel",
        "signature": "MenuBarApps.logLevel",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenuBarApps.action.maximize",
        "desc": "Maximize the application on the current space if it is not maximized already.",
        "doc": "Maximize the application on the current space if it is not maximized already.",
        "file": "Source/MenuBarApps.spoon/init.lua",
        "lineno": "47",
        "name": "maximize",
        "signature": "MenuBarApps.action.maximize",
        "stripped_doc": "",
        "type": "Constant"
      },
      {
        "def": "MenuBarApps.menuBars",
        "desc": "Table containing references to all of the created menu bars.",
        "doc": "Table containing references to all of the created menu bars.",
        "file": "Source/MenuBarApps.spoon/init.lua",
        "lineno": "75",
        "name": "menuBars",
        "signature": "MenuBarApps.menuBars",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "MenuBarApps.action.move",
        "desc": "Move the window to appear under the menu bar item as if it were a menu.",
        "doc": "Move the window to appear under the menu bar item as if it were a menu.",
        "file": "Source/MenuBarApps.spoon/init.lua",
        "lineno": "43",
        "name": "move",
        "signature": "MenuBarApps.action.move",
        "stripped_doc": "",
        "type": "Constant"
      },
      {
        "def": "MenuBarApps:start()",
        "desc": "Spoon start method for MenuBarApps. Creates all configured menu bars.",
        "doc": "Spoon start method for MenuBarApps. Creates all configured menu bars.\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/MenuBarApps.spoon/init.lua",
        "lineno": "156",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "MenuBarApps:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "MenuBarApps:stop()",
        "desc": "Spoon stop method for MenuBarApps. Deletes all configured menu bars.",
        "doc": "Spoon stop method for MenuBarApps. Deletes all configured menu bars.\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/MenuBarApps.spoon/init.lua",
        "lineno": "178",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "MenuBarApps:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "MenuBarApps",
    "stripped_doc": "\nDownload: https://github.com/adammillerio/Spoons/raw/main/Spoons/MenuBarApps.spoon.zip\n\nExample Usage (Using [SpoonInstall](https://zzamboni.org/post/using-spoons-in-hammerspoon/)):\nCreate a \"P\" menu bar item that opens and moves Plexamp and create a \"D\" menu\nbar item that opens and maximizes Discord.\nspoon.SpoonInstall:andUse(\n  \"MenuBarApps\",\n  {\n    config = {\n      apps = {\n        [\"Plexamp\"] = {\n          title = \"P\",\n          action = \"move\"\n        },\n        [\"Discord\"] = {\n          title = \"D\",\n          action = \"maximize\"\n        }\n      }\n    },\n    start = true\n  }\n)",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [
      {
        "def": "Spacer.settingsKey",
        "desc": "Key used for persisting space names between Hammerspoon launches via hs.settings.",
        "doc": "Key used for persisting space names between Hammerspoon launches via hs.settings.",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "22",
        "name": "settingsKey",
        "signature": "Spacer.settingsKey",
        "stripped_doc": "",
        "type": "Constant"
      }
    ],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "Spacer:init()",
        "desc": "Spoon initializer method for Spacer.",
        "doc": "Spoon initializer method for Spacer.\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "395",
        "name": "init",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Spacer:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Spacer:start()",
        "desc": "Spoon start method for Spacer. Creates/starts menu bar item and space watcher.",
        "doc": "Spoon start method for Spacer. Creates/starts menu bar item and space watcher.\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "409",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Spacer:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Spacer:stop()",
        "desc": "Spoon stop method for Spacer. Deletes menu bar item and stops space watcher.",
        "doc": "Spoon stop method for Spacer. Deletes menu bar item and stops space watcher.\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "453",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Spacer:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "Spacer.defaultHotkeys",
        "desc": "Default hotkey to use for the space chooser when \"hotkeys\" = ",
        "doc": "Default hotkey to use for the space chooser when \"hotkeys\" = ",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "27",
        "name": "defaultHotkeys",
        "signature": "Spacer.defaultHotkeys",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Spacer.focusedSpace",
        "desc": "int with the ID of the currently focused space.",
        "doc": "int with the ID of the currently focused space.",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "70",
        "name": "focusedSpace",
        "signature": "Spacer.focusedSpace",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Spacer.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log ",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log \nlevel for the messages coming from the Spoon.",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "32",
        "name": "logger",
        "signature": "Spacer.logger",
        "stripped_doc": "level for the messages coming from the Spoon.",
        "type": "Variable"
      },
      {
        "def": "Spacer.logLevel",
        "desc": "Spacer specific log level override, see hs.logger.setLogLevel for options.",
        "doc": "Spacer specific log level override, see hs.logger.setLogLevel for options.",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "38",
        "name": "logLevel",
        "signature": "Spacer.logLevel",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Spacer.menuBar",
        "desc": "hs.menubar representing the menu bar for Spacer.",
        "doc": "hs.menubar representing the menu bar for Spacer.",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "43",
        "name": "menuBar",
        "signature": "Spacer.menuBar",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Spacer.orderedSpaceNames",
        "desc": "Table with an ordered list of the space names, which is used when loading",
        "doc": "Table with an ordered list of the space names, which is used when loading\nthe menubar, as well as persisted to and from hs.settings between loads.",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "64",
        "name": "orderedSpaceNames",
        "signature": "Spacer.orderedSpaceNames",
        "stripped_doc": "the menubar, as well as persisted to and from hs.settings between loads.",
        "type": "Variable"
      },
      {
        "def": "Spacer.orderedSpaces",
        "desc": "Table holding an ordered list of space IDs, which is then used to resolve",
        "doc": "Table holding an ordered list of space IDs, which is then used to resolve\nactual space names for IDs from Spacer.spaceNames.",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "58",
        "name": "orderedSpaces",
        "signature": "Spacer.orderedSpaces",
        "stripped_doc": "actual space names for IDs from Spacer.spaceNames.",
        "type": "Variable"
      },
      {
        "def": "Spacer.spaceChooser",
        "desc": "hs.chooser object representing the Space chooser.",
        "doc": "hs.chooser object representing the Space chooser.",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "75",
        "name": "spaceChooser",
        "signature": "Spacer.spaceChooser",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Spacer.spaceNames",
        "desc": "Table with key-value mapping of Space ID to it's user set name.",
        "doc": "Table with key-value mapping of Space ID to it's user set name.",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "53",
        "name": "spaceNames",
        "signature": "Spacer.spaceNames",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Spacer.spaceWatcher",
        "desc": "hs.spaces.watcher instance used for monitoring for space changes.",
        "doc": "hs.spaces.watcher instance used for monitoring for space changes.",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "48",
        "name": "spaceWatcher",
        "signature": "Spacer.spaceWatcher",
        "stripped_doc": "",
        "type": "Variable"
      }
    ],
    "desc": "Name and switch Mission Control spaces in the menu bar",
    "doc": "Name and switch Mission Control spaces in the menu bar\n\nDownload: [Spacer.spoon.zip](https://github.com/adammillerio/Spoons/raw/main/Spoons/Spacer.spoon.zip)\n\nREADME: [README.md](https://github.com/adammillerio/Spacer.spoon/blob/main/README.md)\n\nSpace names can be changed from the menubar by holding Alt while selecting\nthe desired space to rename. These are persisted between launches via the\nhs.settings module.",
    "items": [
      {
        "def": "Spacer.defaultHotkeys",
        "desc": "Default hotkey to use for the space chooser when \"hotkeys\" = ",
        "doc": "Default hotkey to use for the space chooser when \"hotkeys\" = ",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "27",
        "name": "defaultHotkeys",
        "signature": "Spacer.defaultHotkeys",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Spacer.focusedSpace",
        "desc": "int with the ID of the currently focused space.",
        "doc": "int with the ID of the currently focused space.",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "70",
        "name": "focusedSpace",
        "signature": "Spacer.focusedSpace",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Spacer:init()",
        "desc": "Spoon initializer method for Spacer.",
        "doc": "Spoon initializer method for Spacer.\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "395",
        "name": "init",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Spacer:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Spacer.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log ",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log \nlevel for the messages coming from the Spoon.",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "32",
        "name": "logger",
        "signature": "Spacer.logger",
        "stripped_doc": "level for the messages coming from the Spoon.",
        "type": "Variable"
      },
      {
        "def": "Spacer.logLevel",
        "desc": "Spacer specific log level override, see hs.logger.setLogLevel for options.",
        "doc": "Spacer specific log level override, see hs.logger.setLogLevel for options.",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "38",
        "name": "logLevel",
        "signature": "Spacer.logLevel",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Spacer.menuBar",
        "desc": "hs.menubar representing the menu bar for Spacer.",
        "doc": "hs.menubar representing the menu bar for Spacer.",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "43",
        "name": "menuBar",
        "signature": "Spacer.menuBar",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Spacer.orderedSpaceNames",
        "desc": "Table with an ordered list of the space names, which is used when loading",
        "doc": "Table with an ordered list of the space names, which is used when loading\nthe menubar, as well as persisted to and from hs.settings between loads.",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "64",
        "name": "orderedSpaceNames",
        "signature": "Spacer.orderedSpaceNames",
        "stripped_doc": "the menubar, as well as persisted to and from hs.settings between loads.",
        "type": "Variable"
      },
      {
        "def": "Spacer.orderedSpaces",
        "desc": "Table holding an ordered list of space IDs, which is then used to resolve",
        "doc": "Table holding an ordered list of space IDs, which is then used to resolve\nactual space names for IDs from Spacer.spaceNames.",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "58",
        "name": "orderedSpaces",
        "signature": "Spacer.orderedSpaces",
        "stripped_doc": "actual space names for IDs from Spacer.spaceNames.",
        "type": "Variable"
      },
      {
        "def": "Spacer.settingsKey",
        "desc": "Key used for persisting space names between Hammerspoon launches via hs.settings.",
        "doc": "Key used for persisting space names between Hammerspoon launches via hs.settings.",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "22",
        "name": "settingsKey",
        "signature": "Spacer.settingsKey",
        "stripped_doc": "",
        "type": "Constant"
      },
      {
        "def": "Spacer.spaceChooser",
        "desc": "hs.chooser object representing the Space chooser.",
        "doc": "hs.chooser object representing the Space chooser.",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "75",
        "name": "spaceChooser",
        "signature": "Spacer.spaceChooser",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Spacer.spaceNames",
        "desc": "Table with key-value mapping of Space ID to it's user set name.",
        "doc": "Table with key-value mapping of Space ID to it's user set name.",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "53",
        "name": "spaceNames",
        "signature": "Spacer.spaceNames",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Spacer.spaceWatcher",
        "desc": "hs.spaces.watcher instance used for monitoring for space changes.",
        "doc": "hs.spaces.watcher instance used for monitoring for space changes.",
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "48",
        "name": "spaceWatcher",
        "signature": "Spacer.spaceWatcher",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "Spacer:start()",
        "desc": "Spoon start method for Spacer. Creates/starts menu bar item and space watcher.",
        "doc": "Spoon start method for Spacer. Creates/starts menu bar item and space watcher.\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "409",
        "name": "start",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Spacer:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "Spacer:stop()",
        "desc": "Spoon stop method for Spacer. Deletes menu bar item and stops space watcher.",
        "doc": "Spoon stop method for Spacer. Deletes menu bar item and stops space watcher.\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/Spacer.spoon/init.lua",
        "lineno": "453",
        "name": "stop",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "Spacer:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "name": "Spacer",
    "stripped_doc": "\nDownload: [Spacer.spoon.zip](https://github.com/adammillerio/Spoons/raw/main/Spoons/Spacer.spoon.zip)\n\nREADME: [README.md](https://github.com/adammillerio/Spacer.spoon/blob/main/README.md)\n\nSpace names can be changed from the menubar by holding Alt while selecting\nthe desired space to rename. These are persisted between launches via the\nhs.settings module.",
    "submodules": [],
    "type": "Module"
  },
  {
    "Command": [],
    "Constant": [],
    "Constructor": [],
    "Deprecated": [],
    "Field": [],
    "Function": [],
    "Method": [
      {
        "def": "WindowCache:findWindowByApp(appName)",
        "desc": "Find the last opened window by application name.",
        "doc": "Find the last opened window by application name.\n\nParameters:\n * appName - name of the application to find\n\nReturns:\n * The `hs.window` object if found, `nil` otherwise",
        "examples": [],
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "113",
        "name": "findWindowByApp",
        "notes": [],
        "parameters": [
          " * appName - name of the application to find"
        ],
        "returns": [
          " * The `hs.window` object if found, `nil` otherwise"
        ],
        "signature": "WindowCache:findWindowByApp(appName)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowCache:findWindowByTitle(title)",
        "desc": "Find a window by title.",
        "doc": "Find a window by title.\n\nParameters:\n * title - title of the window to find\n\nReturns:\n * The `hs.window` object if found, `nil` otherwise",
        "examples": [],
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "77",
        "name": "findWindowByTitle",
        "notes": [],
        "parameters": [
          " * title - title of the window to find"
        ],
        "returns": [
          " * The `hs.window` object if found, `nil` otherwise"
        ],
        "signature": "WindowCache:findWindowByTitle(title)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowCache:focusWindowByApp(appName)",
        "desc": "Find the last opened window by application name and focus it.",
        "doc": "Find the last opened window by application name and focus it.\n\nParameters:\n * appName - name of the application to find\n\nReturns:\n * The `hs.window` object focused if found, `nil` otherwise",
        "examples": [],
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "132",
        "name": "focusWindowByApp",
        "notes": [],
        "parameters": [
          " * appName - name of the application to find"
        ],
        "returns": [
          " * The `hs.window` object focused if found, `nil` otherwise"
        ],
        "signature": "WindowCache:focusWindowByApp(appName)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowCache:focusWindowByTitle(title)",
        "desc": "Find a window by title and focus it.",
        "doc": "Find a window by title and focus it.\n\nParameters:\n * title - title of the window to focus\n\nReturns:\n * The `hs.window` object focused if found, `nil` otherwise",
        "examples": [],
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "96",
        "name": "focusWindowByTitle",
        "notes": [],
        "parameters": [
          " * title - title of the window to focus"
        ],
        "returns": [
          " * The `hs.window` object focused if found, `nil` otherwise"
        ],
        "signature": "WindowCache:focusWindowByTitle(title)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowCache:init()",
        "desc": "Spoon initializer method for WindowCache.",
        "doc": "Spoon initializer method for WindowCache.\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "63",
        "name": "init",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "WindowCache:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowCache:start()",
        "desc": "Spoon start method for WindowCache.",
        "doc": "Spoon start method for WindowCache.\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * Configures the window filter, initializes the cache with all existing\n   windows, and then subscribes to all window related events to be cached.",
        "examples": [],
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "196",
        "name": "start",
        "notes": [
          " * Configures the window filter, initializes the cache with all existing",
          "   windows, and then subscribes to all window related events to be cached."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "WindowCache:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowCache:stop()",
        "desc": "Spoon stop method for WindowCache.",
        "doc": "Spoon stop method for WindowCache.\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * Unsubscribes the window filter from all subscribed functions.",
        "examples": [],
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "235",
        "name": "stop",
        "notes": [
          " * Unsubscribes the window filter from all subscribed functions."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "WindowCache:stop()",
        "stripped_doc": "",
        "type": "Method"
      }
    ],
    "Variable": [
      {
        "def": "WindowCache.currentWindows",
        "desc": "Table containing the window cache, ordered by the time it was added to the",
        "doc": "Table containing the window cache, ordered by the time it was added to the\ncache.",
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "51",
        "name": "currentWindows",
        "signature": "WindowCache.currentWindows",
        "stripped_doc": "cache.",
        "type": "Variable"
      },
      {
        "def": "WindowCache.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log\nlevel for the messages coming from the Spoon.",
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "33",
        "name": "logger",
        "signature": "WindowCache.logger",
        "stripped_doc": "level for the messages coming from the Spoon.",
        "type": "Variable"
      },
      {
        "def": "WindowCache.logLevel",
        "desc": "WindowCache specific log level override, see hs.logger.setLogLevel for options.",
        "doc": "WindowCache specific log level override, see hs.logger.setLogLevel for options.",
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "39",
        "name": "logLevel",
        "signature": "WindowCache.logLevel",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "WindowCache.subscribedFunctions",
        "desc": "Table containing all subscribed instance callbacks for the window filter, used",
        "doc": "Table containing all subscribed instance callbacks for the window filter, used\nduring shutdown.",
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "57",
        "name": "subscribedFunctions",
        "signature": "WindowCache.subscribedFunctions",
        "stripped_doc": "during shutdown.",
        "type": "Variable"
      },
      {
        "def": "WindowCache.windowFilter",
        "desc": "Main hs.window.filter. This is what is used to enumerate and maintain the window",
        "doc": "Main hs.window.filter. This is what is used to enumerate and maintain the window\ncache. It is a copy of the \"default\" window filter with WindowCache specific\nsort order and callback configurations applied in the start method.",
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "44",
        "name": "windowFilter",
        "signature": "WindowCache.windowFilter",
        "stripped_doc": "cache. It is a copy of the \"default\" window filter with WindowCache specific\nsort order and callback configurations applied in the start method.",
        "type": "Variable"
      }
    ],
    "desc": "Utility for quickly retrieving windows",
    "doc": "Utility for quickly retrieving windows\n\nDownload: https://github.com/adammillerio/Spoons/raw/main/Spoons/WindowCache.spoon.zip\n\nThis uses a hs.window.filter to maintain a Least Recently Used cache which\ncan be searched either by window title or application name. This is useful\nfor automations which benefit from quick access to windows.\n\nThis was implemented based entirely off of the source of\n[hs_select_window.spoon](https://github.com/dmgerman/hs_select_window.spoon)\nand split out to be used across other Spoons.\n\nExample Usage (Using [SpoonInstall](https://zzamboni.org/post/using-spoons-in-hammerspoon/)):\nspoon.SpoonInstall:andUse(\n  \"WindowCache\",\n  {\n    start = true\n  }\n)",
    "items": [
      {
        "def": "WindowCache.currentWindows",
        "desc": "Table containing the window cache, ordered by the time it was added to the",
        "doc": "Table containing the window cache, ordered by the time it was added to the\ncache.",
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "51",
        "name": "currentWindows",
        "signature": "WindowCache.currentWindows",
        "stripped_doc": "cache.",
        "type": "Variable"
      },
      {
        "def": "WindowCache:findWindowByApp(appName)",
        "desc": "Find the last opened window by application name.",
        "doc": "Find the last opened window by application name.\n\nParameters:\n * appName - name of the application to find\n\nReturns:\n * The `hs.window` object if found, `nil` otherwise",
        "examples": [],
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "113",
        "name": "findWindowByApp",
        "notes": [],
        "parameters": [
          " * appName - name of the application to find"
        ],
        "returns": [
          " * The `hs.window` object if found, `nil` otherwise"
        ],
        "signature": "WindowCache:findWindowByApp(appName)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowCache:findWindowByTitle(title)",
        "desc": "Find a window by title.",
        "doc": "Find a window by title.\n\nParameters:\n * title - title of the window to find\n\nReturns:\n * The `hs.window` object if found, `nil` otherwise",
        "examples": [],
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "77",
        "name": "findWindowByTitle",
        "notes": [],
        "parameters": [
          " * title - title of the window to find"
        ],
        "returns": [
          " * The `hs.window` object if found, `nil` otherwise"
        ],
        "signature": "WindowCache:findWindowByTitle(title)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowCache:focusWindowByApp(appName)",
        "desc": "Find the last opened window by application name and focus it.",
        "doc": "Find the last opened window by application name and focus it.\n\nParameters:\n * appName - name of the application to find\n\nReturns:\n * The `hs.window` object focused if found, `nil` otherwise",
        "examples": [],
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "132",
        "name": "focusWindowByApp",
        "notes": [],
        "parameters": [
          " * appName - name of the application to find"
        ],
        "returns": [
          " * The `hs.window` object focused if found, `nil` otherwise"
        ],
        "signature": "WindowCache:focusWindowByApp(appName)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowCache:focusWindowByTitle(title)",
        "desc": "Find a window by title and focus it.",
        "doc": "Find a window by title and focus it.\n\nParameters:\n * title - title of the window to focus\n\nReturns:\n * The `hs.window` object focused if found, `nil` otherwise",
        "examples": [],
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "96",
        "name": "focusWindowByTitle",
        "notes": [],
        "parameters": [
          " * title - title of the window to focus"
        ],
        "returns": [
          " * The `hs.window` object focused if found, `nil` otherwise"
        ],
        "signature": "WindowCache:focusWindowByTitle(title)",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowCache:init()",
        "desc": "Spoon initializer method for WindowCache.",
        "doc": "Spoon initializer method for WindowCache.\n\nParameters:\n * None\n\nReturns:\n * None",
        "examples": [],
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "63",
        "name": "init",
        "notes": [],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "WindowCache:init()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowCache.logger",
        "desc": "Logger object used within the Spoon. Can be accessed to set the default log",
        "doc": "Logger object used within the Spoon. Can be accessed to set the default log\nlevel for the messages coming from the Spoon.",
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "33",
        "name": "logger",
        "signature": "WindowCache.logger",
        "stripped_doc": "level for the messages coming from the Spoon.",
        "type": "Variable"
      },
      {
        "def": "WindowCache.logLevel",
        "desc": "WindowCache specific log level override, see hs.logger.setLogLevel for options.",
        "doc": "WindowCache specific log level override, see hs.logger.setLogLevel for options.",
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "39",
        "name": "logLevel",
        "signature": "WindowCache.logLevel",
        "stripped_doc": "",
        "type": "Variable"
      },
      {
        "def": "WindowCache:start()",
        "desc": "Spoon start method for WindowCache.",
        "doc": "Spoon start method for WindowCache.\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * Configures the window filter, initializes the cache with all existing\n   windows, and then subscribes to all window related events to be cached.",
        "examples": [],
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "196",
        "name": "start",
        "notes": [
          " * Configures the window filter, initializes the cache with all existing",
          "   windows, and then subscribes to all window related events to be cached."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "WindowCache:start()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowCache:stop()",
        "desc": "Spoon stop method for WindowCache.",
        "doc": "Spoon stop method for WindowCache.\n\nParameters:\n * None\n\nReturns:\n * None\n\nNotes:\n * Unsubscribes the window filter from all subscribed functions.",
        "examples": [],
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "235",
        "name": "stop",
        "notes": [
          " * Unsubscribes the window filter from all subscribed functions."
        ],
        "parameters": [
          " * None"
        ],
        "returns": [
          " * None"
        ],
        "signature": "WindowCache:stop()",
        "stripped_doc": "",
        "type": "Method"
      },
      {
        "def": "WindowCache.subscribedFunctions",
        "desc": "Table containing all subscribed instance callbacks for the window filter, used",
        "doc": "Table containing all subscribed instance callbacks for the window filter, used\nduring shutdown.",
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "57",
        "name": "subscribedFunctions",
        "signature": "WindowCache.subscribedFunctions",
        "stripped_doc": "during shutdown.",
        "type": "Variable"
      },
      {
        "def": "WindowCache.windowFilter",
        "desc": "Main hs.window.filter. This is what is used to enumerate and maintain the window",
        "doc": "Main hs.window.filter. This is what is used to enumerate and maintain the window\ncache. It is a copy of the \"default\" window filter with WindowCache specific\nsort order and callback configurations applied in the start method.",
        "file": "Source/WindowCache.spoon/init.lua",
        "lineno": "44",
        "name": "windowFilter",
        "signature": "WindowCache.windowFilter",
        "stripped_doc": "cache. It is a copy of the \"default\" window filter with WindowCache specific\nsort order and callback configurations applied in the start method.",
        "type": "Variable"
      }
    ],
    "name": "WindowCache",
    "stripped_doc": "\nDownload: https://github.com/adammillerio/Spoons/raw/main/Spoons/WindowCache.spoon.zip\n\nThis uses a hs.window.filter to maintain a Least Recently Used cache which\ncan be searched either by window title or application name. This is useful\nfor automations which benefit from quick access to windows.\n\nThis was implemented based entirely off of the source of\n[hs_select_window.spoon](https://github.com/dmgerman/hs_select_window.spoon)\nand split out to be used across other Spoons.\n\nExample Usage (Using [SpoonInstall](https://zzamboni.org/post/using-spoons-in-hammerspoon/)):\nspoon.SpoonInstall:andUse(\n  \"WindowCache\",\n  {\n    start = true\n  }\n)",
    "submodules": [],
    "type": "Module"
  }
]